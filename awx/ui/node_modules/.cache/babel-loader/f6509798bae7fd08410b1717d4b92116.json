{"ast":null,"code":"import * as React from 'react';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nexport var EditableTextCell = function EditableTextCell(_ref) {\n  var value = _ref.value,\n    rowIndex = _ref.rowIndex,\n    cellIndex = _ref.cellIndex,\n    props = _ref.props,\n    handleTextInputChange = _ref.handleTextInputChange,\n    inputAriaLabel = _ref.inputAriaLabel,\n    _ref$isDisabled = _ref.isDisabled,\n    isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: inlineStyles.inlineEditValue\n  }, value), React.createElement(\"div\", {\n    className: inlineStyles.inlineEditInput\n  }, React.createElement(TextInput, {\n    isDisabled: isDisabled,\n    value: props.editableValue !== undefined ? props.editableValue : value,\n    validated: props.isValid !== false ? 'default' : 'error',\n    type: \"text\",\n    onChange: function onChange(newValue, event) {\n      handleTextInputChange(newValue, event, rowIndex, cellIndex);\n    },\n    \"aria-label\": inputAriaLabel\n  }), React.createElement(\"div\", {\n    className: css(formStyles.formHelperText, formStyles.modifiers.error),\n    \"aria-live\": \"polite\"\n  }, props.errorText)));\n};\nEditableTextCell.displayName = 'EditableTextCell';","map":{"version":3,"names":["React","TextInput","inlineStyles","formStyles","css","EditableTextCell","_ref","value","rowIndex","cellIndex","props","handleTextInputChange","inputAriaLabel","_ref$isDisabled","isDisabled","createElement","Fragment","className","inlineEditValue","inlineEditInput","editableValue","undefined","validated","isValid","type","onChange","newValue","event","formHelperText","modifiers","error","errorText","displayName"],"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/EditableTextCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { EditableTextCellProps } from './base';\n\nexport interface IEditableTextCell extends React.HTMLProps<HTMLDivElement> {\n  /** The current value of the text input */\n  value: string;\n  /** Row index of this text cell */\n  rowIndex: number;\n  /** Cell index of this text cell */\n  cellIndex: number;\n  /** Props to build the input */\n  props: EditableTextCellProps;\n  /** Event handler which fires when user changes the text in this cell */\n  handleTextInputChange: (\n    newValue: string,\n    event: React.FormEvent<HTMLInputElement>,\n    rowIndex: number,\n    cellIndex: number\n  ) => void;\n  /** accessible label of the text input */\n  inputAriaLabel: string;\n  /** flag indicating if the text input is disabled */\n  isDisabled?: boolean;\n}\n\nexport const EditableTextCell: React.FunctionComponent<IEditableTextCell> = ({\n  value,\n  rowIndex,\n  cellIndex,\n  props,\n  handleTextInputChange,\n  inputAriaLabel,\n  isDisabled = false\n}: IEditableTextCell) => (\n  <React.Fragment>\n    <div className={inlineStyles.inlineEditValue}>{value}</div>\n    <div className={inlineStyles.inlineEditInput}>\n      <TextInput\n        isDisabled={isDisabled}\n        value={props.editableValue !== undefined ? props.editableValue : value}\n        validated={props.isValid !== false ? 'default' : 'error'}\n        type=\"text\"\n        onChange={(newValue, event) => {\n          handleTextInputChange(newValue, event, rowIndex, cellIndex);\n        }}\n        aria-label={inputAriaLabel}\n      />\n      <div className={css(formStyles.formHelperText, formStyles.modifiers.error)} aria-live=\"polite\">\n        {props.errorText}\n      </div>\n    </div>\n  </React.Fragment>\n);\nEditableTextCell.displayName = 'EditableTextCell';\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,sDAAsD;AAChF,OAAOC,YAAY,MAAM,gEAAgE;AACzF,OAAOC,UAAU,MAAM,mDAAmD;AAC1E,SAASC,GAAG,QAAQ,0BAA0B;AAyB9C,OAAO,IAAMC,gBAAgB,GAA+C,SAA/DA,gBAAgBA,CAAAC,IAAA;EAAA,IAC3BC,KAAK,GAAAD,IAAA,CAALC,KAAK;IACLC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IACRC,SAAS,GAAAH,IAAA,CAATG,SAAS;IACTC,KAAK,GAAAJ,IAAA,CAALI,KAAK;IACLC,qBAAqB,GAAAL,IAAA,CAArBK,qBAAqB;IACrBC,cAAc,GAAAN,IAAA,CAAdM,cAAc;IAAAC,eAAA,GAAAP,IAAA,CACdQ,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,KAAK,GAAAA,eAAA;EAAA,OAElBb,KAAA,CAAAe,aAAA,CAACf,KAAK,CAACgB,QAAQ,QACbhB,KAAA,CAAAe,aAAA;IAAKE,SAAS,EAAEf,YAAY,CAACgB;EAAe,GAAGX,KAAK,CAAO,EAC3DP,KAAA,CAAAe,aAAA;IAAKE,SAAS,EAAEf,YAAY,CAACiB;EAAe,GAC1CnB,KAAA,CAAAe,aAAA,CAACd,SAAS;IACRa,UAAU,EAAEA,UAAU;IACtBP,KAAK,EAAEG,KAAK,CAACU,aAAa,KAAKC,SAAS,GAAGX,KAAK,CAACU,aAAa,GAAGb,KAAK;IACtEe,SAAS,EAAEZ,KAAK,CAACa,OAAO,KAAK,KAAK,GAAG,SAAS,GAAG,OAAO;IACxDC,IAAI,EAAC,MAAM;IACXC,QAAQ,EAAE,SAAAA,SAACC,QAAQ,EAAEC,KAAK,EAAI;MAC5BhB,qBAAqB,CAACe,QAAQ,EAAEC,KAAK,EAAEnB,QAAQ,EAAEC,SAAS,CAAC;IAC7D,CAAC;IAAA,cACWG;EAAc,EAC1B,EACFZ,KAAA,CAAAe,aAAA;IAAKE,SAAS,EAAEb,GAAG,CAACD,UAAU,CAACyB,cAAc,EAAEzB,UAAU,CAAC0B,SAAS,CAACC,KAAK,CAAC;IAAA,aAAY;EAAQ,GAC3FpB,KAAK,CAACqB,SAAS,CACZ,CACF,CACS;AAAA,CAClB;AACD1B,gBAAgB,CAAC2B,WAAW,GAAG,kBAAkB"},"metadata":{},"sourceType":"module"}