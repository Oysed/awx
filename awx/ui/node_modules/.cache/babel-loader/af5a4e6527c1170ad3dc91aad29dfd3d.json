{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/**\n * body-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport { columnsAreEqual } from './columns-are-equal';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nexport var BodyRow = /*#__PURE__*/function (_React$Component) {\n  _inherits(BodyRow, _React$Component);\n  var _super = _createSuper(BodyRow);\n  function BodyRow() {\n    _classCallCheck(this, BodyRow);\n    return _super.apply(this, arguments);\n  }\n  _createClass(BodyRow, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      var _this$props = this.props,\n        columns = _this$props.columns,\n        rowData = _this$props.rowData;\n      // Check for row based override.\n      var renderers = nextProps.renderers;\n      if (renderers && renderers.row && renderers.row.shouldComponentUpdate) {\n        if (typeof renderers.row.shouldComponentUpdate === 'function') {\n          return renderers.row.shouldComponentUpdate.call(this, nextProps, {}, {});\n        }\n        return true;\n      }\n      return !(columnsAreEqual(columns, nextProps.columns) && isEqual(rowData, nextProps.rowData));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        columns = _this$props2.columns,\n        renderers = _this$props2.renderers,\n        onRow = _this$props2.onRow,\n        rowKey = _this$props2.rowKey,\n        rowIndex = _this$props2.rowIndex,\n        rowData = _this$props2.rowData;\n      return React.createElement(renderers.row, onRow(rowData, {\n        rowIndex: rowIndex,\n        rowKey: rowKey\n      }), columns.map(function (column, columnIndex) {\n        var property = column.property,\n          cell = column.cell,\n          props = column.props;\n        var evaluatedProperty = property || cell && cell.property;\n        var _ref = cell || {},\n          _ref$transforms = _ref.transforms,\n          transforms = _ref$transforms === void 0 ? [] : _ref$transforms,\n          _ref$formatters = _ref.formatters,\n          formatters = _ref$formatters === void 0 ? [] : _ref$formatters;\n        var extraParameters = {\n          columnIndex: columnIndex,\n          property: evaluatedProperty,\n          column: column,\n          rowData: rowData,\n          rowIndex: rowIndex,\n          rowKey: rowKey\n        };\n        var transformed = evaluateTransforms(transforms, rowData[evaluatedProperty], extraParameters);\n        if (!transformed) {\n          // eslint-disable-next-line no-console\n          console.warn('Table.Body - Failed to receive a transformed result');\n        }\n        var additionalFormaters = [];\n        if (rowData[evaluatedProperty]) {\n          additionalFormaters = rowData[evaluatedProperty].formatters;\n        }\n        return React.createElement(renderers.cell, Object.assign({\n          key: \"col-\".concat(columnIndex, \"-row-\").concat(rowIndex)\n        }, mergeProps(props, cell && cell.props, transformed)), !rowData.fullWidth && transformed.children || evaluateFormatters([].concat(_toConsumableArray(formatters), _toConsumableArray(additionalFormaters)))(rowData[\"_\".concat(evaluatedProperty)] || rowData[evaluatedProperty], extraParameters));\n      }));\n    }\n  }]);\n  return BodyRow;\n}(React.Component);\nBodyRow.displayName = 'BodyRow';\nBodyRow.defaultProps = {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onRow: function onRow() {\n    return {};\n  }\n};","map":{"version":3,"names":["isEqual","React","columnsAreEqual","evaluateFormatters","evaluateTransforms","mergeProps","BodyRow","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","shouldComponentUpdate","nextProps","_this$props","props","columns","rowData","renderers","row","call","render","_this$props2","onRow","rowKey","rowIndex","createElement","map","column","columnIndex","property","cell","evaluatedProperty","_ref","_ref$transforms","transforms","_ref$formatters","formatters","extraParameters","transformed","console","warn","additionalFormaters","Object","assign","concat","fullWidth","children","_toConsumableArray","Component","displayName","defaultProps"],"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/base/body-row.tsx"],"sourcesContent":["/**\n * body-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport { columnsAreEqual } from './columns-are-equal';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nimport { createElementType, formatterValueType, ColumnType, ColumnsType, RowType, RendererType } from './types';\n\nexport interface BodyRowProps {\n  columns: ColumnsType;\n  renderers: RendererType;\n  onRow?: Function;\n  rowIndex: number;\n  rowData: RowType;\n  rowKey: string;\n}\n\nexport class BodyRow extends React.Component<BodyRowProps, {}> {\n  static displayName = 'BodyRow';\n  static defaultProps = {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onRow: (...args: any) => ({})\n  };\n\n  shouldComponentUpdate(nextProps: BodyRowProps) {\n    const { columns, rowData } = this.props;\n\n    // Check for row based override.\n    const { renderers } = nextProps;\n\n    if (renderers && renderers.row && (renderers.row as React.Component).shouldComponentUpdate) {\n      if (typeof (renderers.row as React.Component).shouldComponentUpdate === 'function') {\n        return (renderers.row as React.Component).shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n\n      return true;\n    }\n\n    return !(columnsAreEqual(columns, nextProps.columns) && isEqual(rowData, nextProps.rowData));\n  }\n  render() {\n    const { columns, renderers, onRow, rowKey, rowIndex, rowData } = this.props;\n\n    return React.createElement(\n      renderers.row as createElementType,\n      onRow(rowData, { rowIndex, rowKey }),\n      (columns as []).map((column: ColumnType, columnIndex: number) => {\n        const { property, cell, props } = column;\n        const evaluatedProperty = (property || (cell && cell.property)) as string;\n        const { transforms = [], formatters = [] } = cell || {};\n        const extraParameters = {\n          columnIndex,\n          property: evaluatedProperty,\n          column,\n          rowData,\n          rowIndex,\n          rowKey\n        };\n        const transformed = evaluateTransforms(transforms, rowData[evaluatedProperty], extraParameters);\n\n        if (!transformed) {\n          // eslint-disable-next-line no-console\n          console.warn('Table.Body - Failed to receive a transformed result');\n        }\n\n        let additionalFormaters = [];\n        if (rowData[evaluatedProperty]) {\n          additionalFormaters = rowData[evaluatedProperty].formatters;\n        }\n\n        return React.createElement(\n          renderers.cell as createElementType,\n          {\n            key: `col-${columnIndex}-row-${rowIndex}`,\n            ...mergeProps(props, cell && cell.props, transformed)\n          },\n          (!rowData.fullWidth && transformed.children) ||\n            evaluateFormatters([...formatters, ...additionalFormaters])(\n              rowData[`_${evaluatedProperty}`] || (rowData[evaluatedProperty] as formatterValueType),\n              extraParameters\n            )\n        );\n      })\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}