{"ast":null,"code":"import _toConsumableArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{i18n}from\"@lingui/core\";import React from'react';import{Form}from'@patternfly/react-core';import{useFormikContext}from'formik';import{PasswordField}from'../../FormField';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CredentialPasswordsStep(_ref){var launchConfig=_ref.launchConfig;var _useFormikContext=useFormikContext(),credentials=_useFormikContext.values.credentials;var vaultsThatPrompt=[];var showcredentialPasswordSsh=false;var showcredentialPasswordPrivilegeEscalation=false;var showcredentialPasswordPrivateKeyPassphrase=false;if(!launchConfig.ask_credential_on_launch&&launchConfig.passwords_needed_to_start){launchConfig.passwords_needed_to_start.forEach(function(password){if(password==='ssh_password'){showcredentialPasswordSsh=true;}else if(password==='become_password'){showcredentialPasswordPrivilegeEscalation=true;}else if(password==='ssh_key_unlock'){showcredentialPasswordPrivateKeyPassphrase=true;}else if(password.startsWith('vault_password')){var vaultId=password.split(/\\.(.+)/)[1]||'';vaultsThatPrompt.push(vaultId);}});}else if(credentials){credentials.forEach(function(credential){if(!credential.inputs){var launchConfigCredential=launchConfig.defaults.credentials.find(function(defaultCred){return defaultCred.id===credential.id;});if((launchConfigCredential===null||launchConfigCredential===void 0?void 0:launchConfigCredential.passwords_needed.length)>0){if(launchConfigCredential.passwords_needed.includes('ssh_password')){showcredentialPasswordSsh=true;}if(launchConfigCredential.passwords_needed.includes('become_password')){showcredentialPasswordPrivilegeEscalation=true;}if(launchConfigCredential.passwords_needed.includes('ssh_key_unlock')){showcredentialPasswordPrivateKeyPassphrase=true;}var vaultPasswordIds=launchConfigCredential.passwords_needed.filter(function(passwordNeeded){return passwordNeeded.startsWith('vault_password');}).map(function(vaultPassword){return vaultPassword.split(/\\.(.+)/)[1]||'';});vaultsThatPrompt.push.apply(vaultsThatPrompt,_toConsumableArray(vaultPasswordIds));}}else{var _credential$inputs,_credential$inputs2,_credential$inputs3,_credential$inputs4;if((credential===null||credential===void 0?void 0:(_credential$inputs=credential.inputs)===null||_credential$inputs===void 0?void 0:_credential$inputs.password)==='ASK'){showcredentialPasswordSsh=true;}if((credential===null||credential===void 0?void 0:(_credential$inputs2=credential.inputs)===null||_credential$inputs2===void 0?void 0:_credential$inputs2.become_password)==='ASK'){showcredentialPasswordPrivilegeEscalation=true;}if((credential===null||credential===void 0?void 0:(_credential$inputs3=credential.inputs)===null||_credential$inputs3===void 0?void 0:_credential$inputs3.ssh_key_unlock)==='ASK'){showcredentialPasswordPrivateKeyPassphrase=true;}if((credential===null||credential===void 0?void 0:(_credential$inputs4=credential.inputs)===null||_credential$inputs4===void 0?void 0:_credential$inputs4.vault_password)==='ASK'){vaultsThatPrompt.push(credential.inputs.vault_id);}}});}return/*#__PURE__*/_jsxs(Form,{onSubmit:function onSubmit(e){e.preventDefault();},children:[showcredentialPasswordSsh&&/*#__PURE__*/_jsx(PasswordField,{id:\"launch-ssh-password\",label:/*i18n*/i18n._(\"SSH password\"),name:\"credential_passwords.ssh_password\",isRequired:true}),showcredentialPasswordPrivateKeyPassphrase&&/*#__PURE__*/_jsx(PasswordField,{id:\"launch-private-key-passphrase\",label:/*i18n*/i18n._(\"Private key passphrase\"),name:\"credential_passwords.ssh_key_unlock\",isRequired:true}),showcredentialPasswordPrivilegeEscalation&&/*#__PURE__*/_jsx(PasswordField,{id:\"launch-privilege-escalation-password\",label:/*i18n*/i18n._(\"Privilege escalation password\"),name:\"credential_passwords.become_password\",isRequired:true}),vaultsThatPrompt.map(function(credId){return/*#__PURE__*/_jsx(PasswordField,{id:\"launch-vault-password-\".concat(credId),label:credId===''?/*i18n*/i18n._(\"Vault password\"):/*i18n*/i18n._(\"Vault password | {credId}\",{credId:credId}),name:\"credential_passwords['vault_password\".concat(credId!==''?\".\".concat(credId):'',\"']\"),isRequired:true},credId);})]});}export default CredentialPasswordsStep;","map":{"version":3,"names":["React","Form","useFormikContext","PasswordField","jsx","_jsx","jsxs","_jsxs","CredentialPasswordsStep","_ref","launchConfig","_useFormikContext","credentials","values","vaultsThatPrompt","showcredentialPasswordSsh","showcredentialPasswordPrivilegeEscalation","showcredentialPasswordPrivateKeyPassphrase","ask_credential_on_launch","passwords_needed_to_start","forEach","password","startsWith","vaultId","split","push","credential","inputs","launchConfigCredential","defaults","find","defaultCred","id","passwords_needed","length","includes","vaultPasswordIds","filter","passwordNeeded","map","vaultPassword","apply","_toConsumableArray","_credential$inputs","_credential$inputs2","_credential$inputs3","_credential$inputs4","become_password","ssh_key_unlock","vault_password","vault_id","onSubmit","e","preventDefault","children","label","i18n","_","name","isRequired","credId","concat"],"sources":["/awx_devel/awx/ui/src/components/LaunchPrompt/steps/CredentialPasswordsStep.js"],"sourcesContent":["import React from 'react';\n\nimport { t } from '@lingui/macro';\nimport { Form } from '@patternfly/react-core';\nimport { useFormikContext } from 'formik';\nimport { PasswordField } from '../../FormField';\n\nfunction CredentialPasswordsStep({ launchConfig }) {\n  const {\n    values: { credentials },\n  } = useFormikContext();\n\n  const vaultsThatPrompt = [];\n  let showcredentialPasswordSsh = false;\n  let showcredentialPasswordPrivilegeEscalation = false;\n  let showcredentialPasswordPrivateKeyPassphrase = false;\n\n  if (\n    !launchConfig.ask_credential_on_launch &&\n    launchConfig.passwords_needed_to_start\n  ) {\n    launchConfig.passwords_needed_to_start.forEach((password) => {\n      if (password === 'ssh_password') {\n        showcredentialPasswordSsh = true;\n      } else if (password === 'become_password') {\n        showcredentialPasswordPrivilegeEscalation = true;\n      } else if (password === 'ssh_key_unlock') {\n        showcredentialPasswordPrivateKeyPassphrase = true;\n      } else if (password.startsWith('vault_password')) {\n        const vaultId = password.split(/\\.(.+)/)[1] || '';\n        vaultsThatPrompt.push(vaultId);\n      }\n    });\n  } else if (credentials) {\n    credentials.forEach((credential) => {\n      if (!credential.inputs) {\n        const launchConfigCredential = launchConfig.defaults.credentials.find(\n          (defaultCred) => defaultCred.id === credential.id\n        );\n\n        if (launchConfigCredential?.passwords_needed.length > 0) {\n          if (\n            launchConfigCredential.passwords_needed.includes('ssh_password')\n          ) {\n            showcredentialPasswordSsh = true;\n          }\n          if (\n            launchConfigCredential.passwords_needed.includes('become_password')\n          ) {\n            showcredentialPasswordPrivilegeEscalation = true;\n          }\n          if (\n            launchConfigCredential.passwords_needed.includes('ssh_key_unlock')\n          ) {\n            showcredentialPasswordPrivateKeyPassphrase = true;\n          }\n\n          const vaultPasswordIds = launchConfigCredential.passwords_needed\n            .filter((passwordNeeded) =>\n              passwordNeeded.startsWith('vault_password')\n            )\n            .map((vaultPassword) => vaultPassword.split(/\\.(.+)/)[1] || '');\n\n          vaultsThatPrompt.push(...vaultPasswordIds);\n        }\n      } else {\n        if (credential?.inputs?.password === 'ASK') {\n          showcredentialPasswordSsh = true;\n        }\n\n        if (credential?.inputs?.become_password === 'ASK') {\n          showcredentialPasswordPrivilegeEscalation = true;\n        }\n\n        if (credential?.inputs?.ssh_key_unlock === 'ASK') {\n          showcredentialPasswordPrivateKeyPassphrase = true;\n        }\n\n        if (credential?.inputs?.vault_password === 'ASK') {\n          vaultsThatPrompt.push(credential.inputs.vault_id);\n        }\n      }\n    });\n  }\n\n  return (\n    <Form\n      onSubmit={(e) => {\n        e.preventDefault();\n      }}\n    >\n      {showcredentialPasswordSsh && (\n        <PasswordField\n          id=\"launch-ssh-password\"\n          label={t`SSH password`}\n          name=\"credential_passwords.ssh_password\"\n          isRequired\n        />\n      )}\n      {showcredentialPasswordPrivateKeyPassphrase && (\n        <PasswordField\n          id=\"launch-private-key-passphrase\"\n          label={t`Private key passphrase`}\n          name=\"credential_passwords.ssh_key_unlock\"\n          isRequired\n        />\n      )}\n      {showcredentialPasswordPrivilegeEscalation && (\n        <PasswordField\n          id=\"launch-privilege-escalation-password\"\n          label={t`Privilege escalation password`}\n          name=\"credential_passwords.become_password\"\n          isRequired\n        />\n      )}\n      {vaultsThatPrompt.map((credId) => (\n        <PasswordField\n          id={`launch-vault-password-${credId}`}\n          key={credId}\n          label={\n            credId === '' ? t`Vault password` : t`Vault password | ${credId}`\n          }\n          name={`credential_passwords['vault_password${\n            credId !== '' ? `.${credId}` : ''\n          }']`}\n          isRequired\n        />\n      ))}\n    </Form>\n  );\n}\n\nexport default CredentialPasswordsStep;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}