{"ast":null,"code":"import * as React from 'react';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip';\nimport { Popover } from '@patternfly/react-core/dist/esm/components/Popover';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport { TableText } from './TableText';\nexport var HeaderCellInfoWrapper = function HeaderCellInfoWrapper(_ref) {\n  var children = _ref.children,\n    info = _ref.info,\n    className = _ref.className,\n    _ref$variant = _ref.variant,\n    variant = _ref$variant === void 0 ? 'tooltip' : _ref$variant,\n    popoverProps = _ref.popoverProps,\n    tooltipProps = _ref.tooltipProps,\n    ariaLabel = _ref.ariaLabel;\n  return React.createElement(\"div\", {\n    className: css(styles.tableColumnHelp, className)\n  }, typeof children === 'string' ? React.createElement(TableText, null, children) : children, React.createElement(\"span\", {\n    className: css(styles.tableColumnHelpAction)\n  }, variant === 'tooltip' ? React.createElement(Tooltip, Object.assign({\n    content: info\n  }, tooltipProps), React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": ariaLabel || typeof info === 'string' && info || 'More info'\n  }, React.createElement(HelpIcon, {\n    noVerticalAlign: true\n  }))) : React.createElement(Popover, Object.assign({\n    bodyContent: info\n  }, popoverProps), React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": ariaLabel || typeof info === 'string' && info || 'More info'\n  }, React.createElement(HelpIcon, {\n    noVerticalAlign: true\n  })))));\n};\nHeaderCellInfoWrapper.displayName = 'HeaderCellInfoWrapper';","map":{"version":3,"names":["React","HelpIcon","css","styles","Tooltip","Popover","Button","TableText","HeaderCellInfoWrapper","_ref","children","info","className","_ref$variant","variant","popoverProps","tooltipProps","ariaLabel","createElement","tableColumnHelp","tableColumnHelpAction","Object","assign","content","noVerticalAlign","bodyContent","displayName"],"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/HeaderCellInfoWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { Tooltip, TooltipProps } from '@patternfly/react-core/dist/esm/components/Tooltip';\nimport { Popover, PopoverProps } from '@patternfly/react-core/dist/esm/components/Popover';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button';\nimport { TableText } from './TableText';\n\nexport interface ColumnHelpWrapperProps {\n  /**\n   * The header cell that is wrapped\n   */\n  children: React.ReactNode;\n  /**\n   * The information that is presented in the tooltip/popover\n   */\n  info: React.ReactNode;\n  /**\n   * Optional classname to add to the tooltip/popover\n   */\n  className?: string;\n  /**\n   * The info variant\n   */\n  variant?: 'tooltip' | 'popover';\n  /**\n   * Additional props forwarded to the Popover component\n   */\n  popoverProps?: Omit<PopoverProps, 'bodyContent'>;\n  /**\n   * Additional props forwarded to the tooltip component\n   */\n  tooltipProps?: Omit<TooltipProps, 'content'>;\n  /**\n   * Aria label of the info button\n   */\n  ariaLabel?: string;\n}\n\nexport const HeaderCellInfoWrapper: React.FunctionComponent<ColumnHelpWrapperProps> = ({\n  children,\n  info,\n  className,\n  variant = 'tooltip',\n  popoverProps,\n  tooltipProps,\n  ariaLabel\n}: ColumnHelpWrapperProps) => (\n  <div className={css(styles.tableColumnHelp, className)}>\n    {typeof children === 'string' ? <TableText>{children}</TableText> : children}\n    <span className={css(styles.tableColumnHelpAction)}>\n      {variant === 'tooltip' ? (\n        <Tooltip content={info} {...tooltipProps}>\n          <Button variant=\"plain\" aria-label={ariaLabel || (typeof info === 'string' && info) || 'More info'}>\n            <HelpIcon noVerticalAlign />\n          </Button>\n        </Tooltip>\n      ) : (\n        <Popover bodyContent={info} {...popoverProps}>\n          <Button variant=\"plain\" aria-label={ariaLabel || (typeof info === 'string' && info) || 'More info'}>\n            <HelpIcon noVerticalAlign />\n          </Button>\n        </Popover>\n      )}\n    </span>\n  </div>\n);\nHeaderCellInfoWrapper.displayName = 'HeaderCellInfoWrapper';\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,QAAQ,MAAM,kDAAkD;AACvE,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,qDAAqD;AACxE,SAASC,OAAO,QAAsB,oDAAoD;AAC1F,SAASC,OAAO,QAAsB,oDAAoD;AAC1F,SAASC,MAAM,QAAQ,mDAAmD;AAC1E,SAASC,SAAS,QAAQ,aAAa;AAiCvC,OAAO,IAAMC,qBAAqB,GAAoD,SAAzEA,qBAAqBA,CAAAC,IAAA;EAAA,IAChCC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IACRC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IACJC,SAAS,GAAAH,IAAA,CAATG,SAAS;IAAAC,YAAA,GAAAJ,IAAA,CACTK,OAAO;IAAPA,OAAO,GAAAD,YAAA,cAAG,SAAS,GAAAA,YAAA;IACnBE,YAAY,GAAAN,IAAA,CAAZM,YAAY;IACZC,YAAY,GAAAP,IAAA,CAAZO,YAAY;IACZC,SAAS,GAAAR,IAAA,CAATQ,SAAS;EAAA,OAETjB,KAAA,CAAAkB,aAAA;IAAKN,SAAS,EAAEV,GAAG,CAACC,MAAM,CAACgB,eAAe,EAAEP,SAAS;EAAC,GACnD,OAAOF,QAAQ,KAAK,QAAQ,GAAGV,KAAA,CAAAkB,aAAA,CAACX,SAAS,QAAEG,QAAQ,CAAa,GAAGA,QAAQ,EAC5EV,KAAA,CAAAkB,aAAA;IAAMN,SAAS,EAAEV,GAAG,CAACC,MAAM,CAACiB,qBAAqB;EAAC,GAC/CN,OAAO,KAAK,SAAS,GACpBd,KAAA,CAAAkB,aAAA,CAACd,OAAO,EAAAiB,MAAA,CAAAC,MAAA;IAACC,OAAO,EAAEZ;EAAI,GAAMK,YAAY,GACtChB,KAAA,CAAAkB,aAAA,CAACZ,MAAM;IAACQ,OAAO,EAAC,OAAO;IAAA,cAAaG,SAAS,IAAK,OAAON,IAAI,KAAK,QAAQ,IAAIA,IAAK,IAAI;EAAW,GAChGX,KAAA,CAAAkB,aAAA,CAACjB,QAAQ;IAACuB,eAAe;EAAA,EAAG,CACrB,CACD,GAEVxB,KAAA,CAAAkB,aAAA,CAACb,OAAO,EAAAgB,MAAA,CAAAC,MAAA;IAACG,WAAW,EAAEd;EAAI,GAAMI,YAAY,GAC1Cf,KAAA,CAAAkB,aAAA,CAACZ,MAAM;IAACQ,OAAO,EAAC,OAAO;IAAA,cAAaG,SAAS,IAAK,OAAON,IAAI,KAAK,QAAQ,IAAIA,IAAK,IAAI;EAAW,GAChGX,KAAA,CAAAkB,aAAA,CAACjB,QAAQ;IAACuB,eAAe;EAAA,EAAG,CACrB,CAEZ,CACI,CACH;AAAA,CACP;AACDhB,qBAAqB,CAACkB,WAAW,GAAG,uBAAuB"},"metadata":{},"sourceType":"module"}