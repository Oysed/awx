{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { mapOpenedRows } from './utils/headerUtils';\nimport { Tbody } from '../TableComposable/Tbody';\nexport var BodyWrapper = function BodyWrapper(_a) {\n  var mappedRows = _a.mappedRows,\n    tbodyRef = _a.tbodyRef,\n    _a$rows = _a.rows,\n    rows = _a$rows === void 0 ? [] : _a$rows,\n    onCollapse = _a.onCollapse,\n    headerRows = _a.headerRows,\n    props = __rest(_a, [\"mappedRows\", \"tbodyRef\", \"rows\", \"onCollapse\", \"headerRows\"]);\n  if (mappedRows && mappedRows.some(function (row) {\n    return row.hasOwnProperty('parent');\n  })) {\n    return React.createElement(React.Fragment, null, mapOpenedRows(mappedRows, props.children).map(function (oneRow, key) {\n      return React.createElement(Tbody, Object.assign({}, props, {\n        isExpanded: oneRow.isOpen,\n        key: \"tbody-\".concat(key),\n        ref: tbodyRef\n      }), oneRow.rows);\n    }));\n  }\n  return React.createElement(Tbody, Object.assign({}, props, {\n    ref: tbodyRef\n  }));\n};\nBodyWrapper.displayName = 'BodyWrapper';","map":{"version":3,"names":["React","mapOpenedRows","Tbody","BodyWrapper","_a","mappedRows","tbodyRef","_a$rows","rows","onCollapse","headerRows","props","__rest","some","row","hasOwnProperty","createElement","Fragment","children","map","oneRow","key","Object","assign","isExpanded","isOpen","concat","ref","displayName"],"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/BodyWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IRow, IRowData, IExtraData, IHeaderRow } from './TableTypes';\nimport { mapOpenedRows } from './utils/headerUtils';\nimport { Tbody } from '../TableComposable/Tbody';\n\nexport interface BodyWrapperProps {\n  children?: React.ReactNode;\n  mappedRows?: IRow[];\n  rows?: IRow[];\n  onCollapse?: (\n    event: React.MouseEvent,\n    rowIndex: number,\n    isOpen: boolean,\n    rowData: IRowData,\n    extraData: IExtraData\n  ) => undefined;\n  tbodyRef?: React.Ref<any> | Function;\n  headerRows?: IHeaderRow[];\n}\n\nexport const BodyWrapper: React.FunctionComponent<BodyWrapperProps> = ({\n  mappedRows,\n  tbodyRef,\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  rows = [] as IRow[],\n  onCollapse,\n  headerRows,\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n  ...props\n}: BodyWrapperProps) => {\n  if (mappedRows && mappedRows.some(row => row.hasOwnProperty('parent'))) {\n    return (\n      <React.Fragment>\n        {mapOpenedRows(mappedRows, props.children).map((oneRow, key) => (\n          <Tbody {...props} isExpanded={oneRow.isOpen} key={`tbody-${key}`} ref={tbodyRef as React.Ref<any>}>\n            {oneRow.rows}\n          </Tbody>\n        ))}\n      </React.Fragment>\n    );\n  }\n  return <Tbody {...props} ref={tbodyRef as React.Ref<any>} />;\n};\nBodyWrapper.displayName = 'BodyWrapper';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,KAAK,QAAQ,0BAA0B;AAiBhD,OAAO,IAAMC,WAAW,GAA8C,SAAzDA,WAAWA,CAA+CC,EASpD,EAAI;MARrBC,UAAU,GAKAD,EAGO,CARjBC,UAAU;IACVC,QAAQ,GAIEF,EAGO,CAPjBE,QAAQ;IAAAC,OAAA,GAIEH,EAGO,CALjBI,IAAI;IAAJA,IAAI,GAAAD,OAAA,cAAG,EAAY,GAAAA,OAAA;IACnBE,UAAU,GACAL,EAGO,CAJjBK,UAAU;IACVC,UAAU,GAAAN,EAGO,CAHjBM,UAAU;IAEPC,KAAK,GAAAC,MAAA,CAAAR,EAAA,EAR6D,8DAStE,CADS;EAER,IAAIC,UAAU,IAAIA,UAAU,CAACQ,IAAI,CAAC,UAAAC,GAAG;IAAA,OAAIA,GAAG,CAACC,cAAc,CAAC,QAAQ,CAAC;EAAA,EAAC,EAAE;IACtE,OACEf,KAAA,CAAAgB,aAAA,CAAChB,KAAK,CAACiB,QAAQ,QACZhB,aAAa,CAACI,UAAU,EAAEM,KAAK,CAACO,QAAQ,CAAC,CAACC,GAAG,CAAC,UAACC,MAAM,EAAEC,GAAG;MAAA,OACzDrB,KAAA,CAAAgB,aAAA,CAACd,KAAK,EAAAoB,MAAA,CAAAC,MAAA,KAAKZ,KAAK;QAAEa,UAAU,EAAEJ,MAAM,CAACK,MAAM;QAAEJ,GAAG,WAAAK,MAAA,CAAWL,GAAG,CAAE;QAAEM,GAAG,EAAErB;MAA0B,IAC9Fc,MAAM,CAACZ,IAAI,CACN;IAAA,CACT,CAAC,CACa;;EAGrB,OAAOR,KAAA,CAAAgB,aAAA,CAACd,KAAK,EAAAoB,MAAA,CAAAC,MAAA,KAAKZ,KAAK;IAAEgB,GAAG,EAAErB;EAA0B,GAAI;AAC9D,CAAC;AACDH,WAAW,CAACyB,WAAW,GAAG,aAAa"},"metadata":{},"sourceType":"module"}