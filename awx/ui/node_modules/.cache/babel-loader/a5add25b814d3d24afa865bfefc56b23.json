{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";import _slicedToArray from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _taggedTemplateLiteral from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _excluded=[\"credential\",\"credentialTypes\",\"inputSources\",\"onSubmit\",\"onCancel\",\"submitError\",\"isOrgLookupDisabled\"],_excluded2=[\"credential_type\"];var _templateObject,_templateObject2;import{i18n}from\"@lingui/core\";import React,{useCallback,useEffect,useState}from'react';import{useLocation}from'react-router-dom';import{Formik,useField,useFormikContext}from'formik';import{ActionGroup,Button,Form,FormGroup,Select as PFSelect,SelectOption as PFSelectOption,SelectVariant,Tooltip}from'@patternfly/react-core';import styled from'styled-components';import FormField,{FormSubmitError}from'components/FormField';import{FormColumnLayout,FormFullWidthLayout}from'components/FormLayout';import{required}from'util/validators';import OrganizationLookup from'components/Lookup/OrganizationLookup';import TypeInputsSubForm from'./TypeInputsSubForm';import ExternalTestModal from'./ExternalTestModal';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Select=styled(PFSelect)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  ul {\\n    max-width: 495px;\\n  }\\n  \",\"\\n\"])),function(props){return props.isDisabled?\"cursor: not-allowed\":null;});var SelectOption=styled(PFSelectOption)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  white-space: nowrap;\\n  text-overflow: ellipsis;\\n  overflow: hidden;\\n\"])));function CredentialFormFields(_ref){var _credentialTypes$cred,_credentialTypes$cred2,_credentialTypes$cred3;var initialTypeId=_ref.initialTypeId,credentialTypes=_ref.credentialTypes;var _useLocation=useLocation(),pathname=_useLocation.pathname;var _useFormikContext=useFormikContext(),setFieldValue=_useFormikContext.setFieldValue,initialValues=_useFormikContext.initialValues,setFieldTouched=_useFormikContext.setFieldTouched;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isSelectOpen=_useState2[0],setIsSelectOpen=_useState2[1];var _useField=useField({name:'credential_type',validate:required(/*i18n*/i18n._(\"Select a value for this field\"))}),_useField2=_slicedToArray(_useField,3),credTypeField=_useField2[0],credTypeMeta=_useField2[1],credTypeHelpers=_useField2[2];var _useState3=useState(initialTypeId),_useState4=_slicedToArray(_useState3,2),credentialTypeId=_useState4[0],setCredentialTypeId=_useState4[1];var isGalaxyCredential=!!credentialTypeId&&((_credentialTypes$cred=credentialTypes[credentialTypeId])===null||_credentialTypes$cred===void 0?void 0:_credentialTypes$cred.kind)==='galaxy';var _useField3=useField('organization'),_useField4=_slicedToArray(_useField3,3),orgField=_useField4[0],orgMeta=_useField4[1],orgHelpers=_useField4[2];var credentialTypeOptions=Object.keys(credentialTypes).map(function(key){return{value:credentialTypes[key].id,key:credentialTypes[key].id,label:credentialTypes[key].name};}).sort(function(a,b){return a.label.toLowerCase()>b.label.toLowerCase()?1:-1;});var resetSubFormFields=useCallback(function(newCredentialTypeId){var fields=credentialTypes[newCredentialTypeId].inputs.fields||[];fields.forEach(function(_ref2){var ask_at_runtime=_ref2.ask_at_runtime,type=_ref2.type,id=_ref2.id,choices=_ref2.choices,defaultValue=_ref2.default;if(parseInt(newCredentialTypeId,10)===initialTypeId){setFieldValue(\"inputs.\".concat(id),initialValues.inputs[id]);if(ask_at_runtime){setFieldValue(\"passwordPrompts.\".concat(id),initialValues.passwordPrompts[id]);}}else{switch(type){case'string':setFieldValue(\"inputs.\".concat(id),defaultValue||'');break;case'boolean':setFieldValue(\"inputs.\".concat(id),defaultValue||false);break;default:break;}if(choices){setFieldValue(\"inputs.\".concat(id),defaultValue);}if(ask_at_runtime){setFieldValue(\"passwordPrompts.\".concat(id),false);}}setFieldTouched(\"inputs.\".concat(id),false);});},[credentialTypes,initialTypeId,initialValues.inputs,initialValues.passwordPrompts,setFieldTouched,setFieldValue]);useEffect(function(){if(credentialTypeId){resetSubFormFields(credentialTypeId);}},[resetSubFormFields,credentialTypeId]);var handleOrganizationUpdate=useCallback(function(value){setFieldValue('organization',value);setFieldTouched('organization',true,false);},[setFieldValue,setFieldTouched]);var isCredentialTypeDisabled=pathname.includes('edit');var credentialTypeSelect=/*#__PURE__*/_jsx(Select,{isDisabled:isCredentialTypeDisabled,ouiaId:\"CredentialForm-credential_type\",\"aria-label\":/*i18n*/i18n._(\"Credential Type\"),typeAheadAriaLabel:/*i18n*/i18n._(\"Select Credential Type\"),isOpen:isSelectOpen,variant:SelectVariant.typeahead,onToggle:setIsSelectOpen,onSelect:function onSelect(event,value){setCredentialTypeId(value);credTypeHelpers.setValue(value);setIsSelectOpen(false);},selections:credTypeField.value,placeholder:/*i18n*/i18n._(\"Select a credential Type\"),isCreatable:false,maxHeight:\"300px\",width:\"100%\",noResultsFoundText:/*i18n*/i18n._(\"No results found\"),children:credentialTypeOptions.map(function(credType){return/*#__PURE__*/_jsx(SelectOption,{value:credType.value,\"data-cy\":\"\".concat(credType.id,\"-credential-type-select-option\"),children:credType.label},credType.value);})});return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(FormField,{id:\"credential-name\",label:/*i18n*/i18n._(\"Name\"),name:\"name\",type:\"text\",validate:required(null),isRequired:true}),/*#__PURE__*/_jsx(FormField,{id:\"credential-description\",label:/*i18n*/i18n._(\"Description\"),name:\"description\",type:\"text\"}),/*#__PURE__*/_jsx(OrganizationLookup,{helperTextInvalid:orgMeta.error,isValid:!orgMeta.touched||!orgMeta.error,onBlur:function onBlur(){return orgHelpers.setTouched();},onChange:handleOrganizationUpdate,value:orgField.value,touched:orgMeta.touched,error:orgMeta.error,required:isGalaxyCredential,isDisabled:initialValues.isOrgLookupDisabled,validate:isGalaxyCredential?required(/*i18n*/i18n._(\"Galaxy credentials must be owned by an Organization.\")):undefined}),/*#__PURE__*/_jsx(FormGroup,{fieldId:\"credential-Type\",helperTextInvalid:credTypeMeta.error,isRequired:true,validated:!credTypeMeta.touched||!credTypeMeta.error?'default':'error',label:/*i18n*/i18n._(\"Credential Type\"),children:isCredentialTypeDisabled?/*#__PURE__*/_jsx(Tooltip,{content:\"You cannot change the credential type of a credential,\\n              as it may break the functionality of the resources using it.\",children:credentialTypeSelect}):credentialTypeSelect}),credentialTypeId!==undefined&&credentialTypeId!==''&&((_credentialTypes$cred2=credentialTypes[credentialTypeId])===null||_credentialTypes$cred2===void 0?void 0:(_credentialTypes$cred3=_credentialTypes$cred2.inputs)===null||_credentialTypes$cred3===void 0?void 0:_credentialTypes$cred3.fields)&&/*#__PURE__*/_jsx(TypeInputsSubForm,{credentialType:credentialTypes[credentialTypeId]})]});}function CredentialForm(_ref3){var _credential$summary_f,_credentialTypes$init;var _ref3$credential=_ref3.credential,credential=_ref3$credential===void 0?{}:_ref3$credential,credentialTypes=_ref3.credentialTypes,inputSources=_ref3.inputSources,_onSubmit=_ref3.onSubmit,onCancel=_ref3.onCancel,submitError=_ref3.submitError,isOrgLookupDisabled=_ref3.isOrgLookupDisabled,rest=_objectWithoutProperties(_ref3,_excluded);var initialTypeId=credential===null||credential===void 0?void 0:credential.credential_type;var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),showExternalTestModal=_useState6[0],setShowExternalTestModal=_useState6[1];var initialValues={name:credential.name||'',description:credential.description||'',organization:(credential===null||credential===void 0?void 0:(_credential$summary_f=credential.summary_fields)===null||_credential$summary_f===void 0?void 0:_credential$summary_f.organization)||null,credential_type:((_credentialTypes$init=credentialTypes[initialTypeId])===null||_credentialTypes$init===void 0?void 0:_credentialTypes$init.id)||'',inputs:_objectSpread({},credential===null||credential===void 0?void 0:credential.inputs),passwordPrompts:{},isOrgLookupDisabled:isOrgLookupDisabled||false};Object.values(credentialTypes).forEach(function(credentialType){if(!credential.id||credential.credential_type===credentialType.id){var fields=credentialType.inputs.fields||[];fields.forEach(function(_ref4){var ask_at_runtime=_ref4.ask_at_runtime,type=_ref4.type,id=_ref4.id,choices=_ref4.choices,defaultValue=_ref4.default;if(credential!==null&&credential!==void 0&&credential.inputs&&id in credential.inputs){if(ask_at_runtime){initialValues.passwordPrompts[id]=credential.inputs[id]==='ASK'||false;initialValues.inputs[id]=credential.inputs[id]==='ASK'?'':credential.inputs[id];}else{initialValues.inputs[id]=credential.inputs[id];}}else{switch(type){case'string':initialValues.inputs[id]=defaultValue||'';break;case'boolean':initialValues.inputs[id]=defaultValue||false;break;default:break;}if(choices){initialValues.inputs[id]=defaultValue;}if(ask_at_runtime){initialValues.passwordPrompts[id]=false;}}});}});Object.values(inputSources).forEach(function(inputSource){initialValues.inputs[inputSource.input_field_name]={credential:inputSource.summary_fields.source_credential,inputs:inputSource.metadata};});return/*#__PURE__*/_jsx(Formik,{initialValues:initialValues,onSubmit:function onSubmit(values){var credential_type=values.credential_type,actualValues=_objectWithoutProperties(values,_excluded2);// credential_type could be the raw id or the displayed name value.\n// If it's the name, replace it with the id before making the request.\nactualValues.credential_type=Object.keys(credentialTypes).find(function(key){return credentialTypes[key].name===credential_type;})||credential_type;_onSubmit(actualValues);},children:function children(formik){var _formik$values,_credentialTypes$form;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Form,{autoComplete:\"off\",onSubmit:formik.handleSubmit,children:/*#__PURE__*/_jsxs(FormColumnLayout,{children:[/*#__PURE__*/_jsx(CredentialFormFields,_objectSpread({initialTypeId:initialTypeId,credentialTypes:credentialTypes},rest)),/*#__PURE__*/_jsx(FormSubmitError,{error:submitError}),/*#__PURE__*/_jsx(FormFullWidthLayout,{children:/*#__PURE__*/_jsxs(ActionGroup,{children:[/*#__PURE__*/_jsx(Button,{ouiaId:\"credential-form-save-button\",id:\"credential-form-save-button\",\"aria-label\":/*i18n*/i18n._(\"Save\"),variant:\"primary\",type:\"button\",onClick:formik.handleSubmit,children:/*i18n*/i18n._(\"Save\")}),(formik===null||formik===void 0?void 0:(_formik$values=formik.values)===null||_formik$values===void 0?void 0:_formik$values.credential_type)&&((_credentialTypes$form=credentialTypes[formik.values.credential_type])===null||_credentialTypes$form===void 0?void 0:_credentialTypes$form.kind)==='external'&&/*#__PURE__*/_jsx(Button,{ouiaId:\"credential-form-test-button\",id:\"credential-form-test-button\",\"aria-label\":/*i18n*/i18n._(\"Test\"),variant:\"secondary\",type:\"button\",onClick:function onClick(){return setShowExternalTestModal(true);},isDisabled:!formik.isValid,children:/*i18n*/i18n._(\"Test\")}),/*#__PURE__*/_jsx(Button,{ouiaId:\"credential-form-cancel-button\",id:\"credential-form-cancel-button\",\"aria-label\":/*i18n*/i18n._(\"Cancel\"),variant:\"link\",type:\"button\",onClick:onCancel,children:/*i18n*/i18n._(\"Cancel\")})]})})]})}),showExternalTestModal&&/*#__PURE__*/_jsx(ExternalTestModal,{credential:credential,credentialType:credentialTypes[formik.values.credential_type],credentialFormValues:formik.values,onClose:function onClose(){return setShowExternalTestModal(false);}})]});}});}CredentialForm.defaultProps={credential:{},inputSources:{},submitError:null};export default CredentialForm;","map":{"version":3,"names":["React","useCallback","useEffect","useState","useLocation","Formik","useField","useFormikContext","ActionGroup","Button","Form","FormGroup","Select","PFSelect","SelectOption","PFSelectOption","SelectVariant","Tooltip","styled","FormField","FormSubmitError","FormColumnLayout","FormFullWidthLayout","required","OrganizationLookup","TypeInputsSubForm","ExternalTestModal","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","_templateObject","_taggedTemplateLiteral","props","isDisabled","_templateObject2","CredentialFormFields","_ref","_credentialTypes$cred","_credentialTypes$cred2","_credentialTypes$cred3","initialTypeId","credentialTypes","_useLocation","pathname","_useFormikContext","setFieldValue","initialValues","setFieldTouched","_useState","_useState2","_slicedToArray","isSelectOpen","setIsSelectOpen","_useField","name","validate","i18n","_","_useField2","credTypeField","credTypeMeta","credTypeHelpers","_useState3","_useState4","credentialTypeId","setCredentialTypeId","isGalaxyCredential","kind","_useField3","_useField4","orgField","orgMeta","orgHelpers","credentialTypeOptions","Object","keys","map","key","value","id","label","sort","a","b","toLowerCase","resetSubFormFields","newCredentialTypeId","fields","inputs","forEach","_ref2","ask_at_runtime","type","choices","defaultValue","default","parseInt","concat","passwordPrompts","handleOrganizationUpdate","isCredentialTypeDisabled","includes","credentialTypeSelect","ouiaId","typeAheadAriaLabel","isOpen","variant","typeahead","onToggle","onSelect","event","setValue","selections","placeholder","isCreatable","maxHeight","width","noResultsFoundText","children","credType","isRequired","helperTextInvalid","error","isValid","touched","onBlur","setTouched","onChange","isOrgLookupDisabled","undefined","fieldId","validated","content","credentialType","CredentialForm","_ref3","_credential$summary_f","_credentialTypes$init","_ref3$credential","credential","inputSources","onSubmit","onCancel","submitError","rest","_objectWithoutProperties","_excluded","credential_type","_useState5","_useState6","showExternalTestModal","setShowExternalTestModal","description","organization","summary_fields","_objectSpread","values","_ref4","inputSource","input_field_name","source_credential","metadata","actualValues","_excluded2","find","formik","_formik$values","_credentialTypes$form","autoComplete","handleSubmit","onClick","credentialFormValues","onClose","defaultProps"],"sources":["/awx_devel/awx/ui/src/screens/Credential/shared/CredentialForm.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { shape } from 'prop-types';\nimport { Formik, useField, useFormikContext } from 'formik';\n\nimport { t } from '@lingui/macro';\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  FormGroup,\n  Select as PFSelect,\n  SelectOption as PFSelectOption,\n  SelectVariant,\n  Tooltip,\n} from '@patternfly/react-core';\nimport styled from 'styled-components';\nimport FormField, { FormSubmitError } from 'components/FormField';\nimport { FormColumnLayout, FormFullWidthLayout } from 'components/FormLayout';\nimport { required } from 'util/validators';\nimport OrganizationLookup from 'components/Lookup/OrganizationLookup';\nimport TypeInputsSubForm from './TypeInputsSubForm';\nimport ExternalTestModal from './ExternalTestModal';\n\nconst Select = styled(PFSelect)`\n  ul {\n    max-width: 495px;\n  }\n  ${(props) => (props.isDisabled ? `cursor: not-allowed` : null)}\n`;\n\nconst SelectOption = styled(PFSelectOption)`\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nfunction CredentialFormFields({ initialTypeId, credentialTypes }) {\n  const { pathname } = useLocation();\n  const { setFieldValue, initialValues, setFieldTouched } = useFormikContext();\n  const [isSelectOpen, setIsSelectOpen] = useState(false);\n  const [credTypeField, credTypeMeta, credTypeHelpers] = useField({\n    name: 'credential_type',\n    validate: required(t`Select a value for this field`),\n  });\n\n  const [credentialTypeId, setCredentialTypeId] = useState(initialTypeId);\n\n  const isGalaxyCredential =\n    !!credentialTypeId && credentialTypes[credentialTypeId]?.kind === 'galaxy';\n\n  const [orgField, orgMeta, orgHelpers] = useField('organization');\n\n  const credentialTypeOptions = Object.keys(credentialTypes)\n    .map((key) => ({\n      value: credentialTypes[key].id,\n      key: credentialTypes[key].id,\n      label: credentialTypes[key].name,\n    }))\n    .sort((a, b) => (a.label.toLowerCase() > b.label.toLowerCase() ? 1 : -1));\n\n  const resetSubFormFields = useCallback(\n    (newCredentialTypeId) => {\n      const fields = credentialTypes[newCredentialTypeId].inputs.fields || [];\n      fields.forEach(\n        ({ ask_at_runtime, type, id, choices, default: defaultValue }) => {\n          if (parseInt(newCredentialTypeId, 10) === initialTypeId) {\n            setFieldValue(`inputs.${id}`, initialValues.inputs[id]);\n            if (ask_at_runtime) {\n              setFieldValue(\n                `passwordPrompts.${id}`,\n                initialValues.passwordPrompts[id]\n              );\n            }\n          } else {\n            switch (type) {\n              case 'string':\n                setFieldValue(`inputs.${id}`, defaultValue || '');\n                break;\n              case 'boolean':\n                setFieldValue(`inputs.${id}`, defaultValue || false);\n                break;\n              default:\n                break;\n            }\n\n            if (choices) {\n              setFieldValue(`inputs.${id}`, defaultValue);\n            }\n\n            if (ask_at_runtime) {\n              setFieldValue(`passwordPrompts.${id}`, false);\n            }\n          }\n          setFieldTouched(`inputs.${id}`, false);\n        }\n      );\n    },\n    [\n      credentialTypes,\n      initialTypeId,\n      initialValues.inputs,\n      initialValues.passwordPrompts,\n      setFieldTouched,\n      setFieldValue,\n    ]\n  );\n\n  useEffect(() => {\n    if (credentialTypeId) {\n      resetSubFormFields(credentialTypeId);\n    }\n  }, [resetSubFormFields, credentialTypeId]);\n\n  const handleOrganizationUpdate = useCallback(\n    (value) => {\n      setFieldValue('organization', value);\n      setFieldTouched('organization', true, false);\n    },\n    [setFieldValue, setFieldTouched]\n  );\n\n  const isCredentialTypeDisabled = pathname.includes('edit');\n  const credentialTypeSelect = (\n    <Select\n      isDisabled={isCredentialTypeDisabled}\n      ouiaId=\"CredentialForm-credential_type\"\n      aria-label={t`Credential Type`}\n      typeAheadAriaLabel={t`Select Credential Type`}\n      isOpen={isSelectOpen}\n      variant={SelectVariant.typeahead}\n      onToggle={setIsSelectOpen}\n      onSelect={(event, value) => {\n        setCredentialTypeId(value);\n        credTypeHelpers.setValue(value);\n        setIsSelectOpen(false);\n      }}\n      selections={credTypeField.value}\n      placeholder={t`Select a credential Type`}\n      isCreatable={false}\n      maxHeight=\"300px\"\n      width=\"100%\"\n      noResultsFoundText={t`No results found`}\n    >\n      {credentialTypeOptions.map((credType) => (\n        <SelectOption\n          key={credType.value}\n          value={credType.value}\n          data-cy={`${credType.id}-credential-type-select-option`}\n        >\n          {credType.label}\n        </SelectOption>\n      ))}\n    </Select>\n  );\n\n  return (\n    <>\n      <FormField\n        id=\"credential-name\"\n        label={t`Name`}\n        name=\"name\"\n        type=\"text\"\n        validate={required(null)}\n        isRequired\n      />\n      <FormField\n        id=\"credential-description\"\n        label={t`Description`}\n        name=\"description\"\n        type=\"text\"\n      />\n      <OrganizationLookup\n        helperTextInvalid={orgMeta.error}\n        isValid={!orgMeta.touched || !orgMeta.error}\n        onBlur={() => orgHelpers.setTouched()}\n        onChange={handleOrganizationUpdate}\n        value={orgField.value}\n        touched={orgMeta.touched}\n        error={orgMeta.error}\n        required={isGalaxyCredential}\n        isDisabled={initialValues.isOrgLookupDisabled}\n        validate={\n          isGalaxyCredential\n            ? required(t`Galaxy credentials must be owned by an Organization.`)\n            : undefined\n        }\n      />\n      <FormGroup\n        fieldId=\"credential-Type\"\n        helperTextInvalid={credTypeMeta.error}\n        isRequired\n        validated={\n          !credTypeMeta.touched || !credTypeMeta.error ? 'default' : 'error'\n        }\n        label={t`Credential Type`}\n      >\n        {isCredentialTypeDisabled ? (\n          <Tooltip\n            content={`You cannot change the credential type of a credential,\n              as it may break the functionality of the resources using it.`}\n          >\n            {credentialTypeSelect}\n          </Tooltip>\n        ) : (\n          credentialTypeSelect\n        )}\n      </FormGroup>\n      {credentialTypeId !== undefined &&\n        credentialTypeId !== '' &&\n        credentialTypes[credentialTypeId]?.inputs?.fields && (\n          <TypeInputsSubForm\n            credentialType={credentialTypes[credentialTypeId]}\n          />\n        )}\n    </>\n  );\n}\n\nfunction CredentialForm({\n  credential = {},\n  credentialTypes,\n  inputSources,\n  onSubmit,\n  onCancel,\n  submitError,\n  isOrgLookupDisabled,\n  ...rest\n}) {\n  const initialTypeId = credential?.credential_type;\n\n  const [showExternalTestModal, setShowExternalTestModal] = useState(false);\n  const initialValues = {\n    name: credential.name || '',\n    description: credential.description || '',\n    organization: credential?.summary_fields?.organization || null,\n    credential_type: credentialTypes[initialTypeId]?.id || '',\n    inputs: { ...credential?.inputs },\n    passwordPrompts: {},\n    isOrgLookupDisabled: isOrgLookupDisabled || false,\n  };\n\n  Object.values(credentialTypes).forEach((credentialType) => {\n    if (!credential.id || credential.credential_type === credentialType.id) {\n      const fields = credentialType.inputs.fields || [];\n      fields.forEach(\n        ({ ask_at_runtime, type, id, choices, default: defaultValue }) => {\n          if (credential?.inputs && id in credential.inputs) {\n            if (ask_at_runtime) {\n              initialValues.passwordPrompts[id] =\n                credential.inputs[id] === 'ASK' || false;\n              initialValues.inputs[id] =\n                credential.inputs[id] === 'ASK' ? '' : credential.inputs[id];\n            } else {\n              initialValues.inputs[id] = credential.inputs[id];\n            }\n          } else {\n            switch (type) {\n              case 'string':\n                initialValues.inputs[id] = defaultValue || '';\n                break;\n              case 'boolean':\n                initialValues.inputs[id] = defaultValue || false;\n                break;\n              default:\n                break;\n            }\n\n            if (choices) {\n              initialValues.inputs[id] = defaultValue;\n            }\n\n            if (ask_at_runtime) {\n              initialValues.passwordPrompts[id] = false;\n            }\n          }\n        }\n      );\n    }\n  });\n\n  Object.values(inputSources).forEach((inputSource) => {\n    initialValues.inputs[inputSource.input_field_name] = {\n      credential: inputSource.summary_fields.source_credential,\n      inputs: inputSource.metadata,\n    };\n  });\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={(values) => {\n        const { credential_type, ...actualValues } = values;\n        // credential_type could be the raw id or the displayed name value.\n        // If it's the name, replace it with the id before making the request.\n        actualValues.credential_type =\n          Object.keys(credentialTypes).find(\n            (key) => credentialTypes[key].name === credential_type\n          ) || credential_type;\n        onSubmit(actualValues);\n      }}\n    >\n      {(formik) => (\n        <>\n          <Form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n            <FormColumnLayout>\n              <CredentialFormFields\n                initialTypeId={initialTypeId}\n                credentialTypes={credentialTypes}\n                {...rest}\n              />\n              <FormSubmitError error={submitError} />\n              <FormFullWidthLayout>\n                <ActionGroup>\n                  <Button\n                    ouiaId=\"credential-form-save-button\"\n                    id=\"credential-form-save-button\"\n                    aria-label={t`Save`}\n                    variant=\"primary\"\n                    type=\"button\"\n                    onClick={formik.handleSubmit}\n                  >\n                    {t`Save`}\n                  </Button>\n                  {formik?.values?.credential_type &&\n                    credentialTypes[formik.values.credential_type]?.kind ===\n                      'external' && (\n                      <Button\n                        ouiaId=\"credential-form-test-button\"\n                        id=\"credential-form-test-button\"\n                        aria-label={t`Test`}\n                        variant=\"secondary\"\n                        type=\"button\"\n                        onClick={() => setShowExternalTestModal(true)}\n                        isDisabled={!formik.isValid}\n                      >\n                        {t`Test`}\n                      </Button>\n                    )}\n                  <Button\n                    ouiaId=\"credential-form-cancel-button\"\n                    id=\"credential-form-cancel-button\"\n                    aria-label={t`Cancel`}\n                    variant=\"link\"\n                    type=\"button\"\n                    onClick={onCancel}\n                  >\n                    {t`Cancel`}\n                  </Button>\n                </ActionGroup>\n              </FormFullWidthLayout>\n            </FormColumnLayout>\n          </Form>\n          {showExternalTestModal && (\n            <ExternalTestModal\n              credential={credential}\n              credentialType={credentialTypes[formik.values.credential_type]}\n              credentialFormValues={formik.values}\n              onClose={() => setShowExternalTestModal(false)}\n            />\n          )}\n        </>\n      )}\n    </Formik>\n  );\n}\n\nCredentialForm.propTypes = {\n  credentialTypes: shape({}).isRequired,\n  credential: shape({}),\n  inputSources: shape({}),\n  submitError: shape({}),\n};\n\nCredentialForm.defaultProps = {\n  credential: {},\n  inputSources: {},\n  submitError: null,\n};\n\nexport default CredentialForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}