{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { SelectColumn, RowSelectVariant } from '../../SelectColumn';\nimport checkStyles from '@patternfly/react-styles/css/components/Check/check';\nexport var selectable = function selectable(label, _ref) {\n  var rowIndex = _ref.rowIndex,\n    columnIndex = _ref.columnIndex,\n    rowData = _ref.rowData,\n    column = _ref.column,\n    property = _ref.property;\n  var _column$extraParams = column.extraParams,\n    onSelect = _column$extraParams.onSelect,\n    selectVariant = _column$extraParams.selectVariant,\n    allRowsSelected = _column$extraParams.allRowsSelected,\n    isHeaderSelectDisabled = _column$extraParams.isHeaderSelectDisabled;\n  var extraData = {\n    rowIndex: rowIndex,\n    columnIndex: columnIndex,\n    column: column,\n    property: property\n  };\n  if (rowData && rowData.hasOwnProperty('parent') && !rowData.showSelect && !rowData.fullWidth) {\n    return {\n      component: 'td',\n      isVisible: true\n    };\n  }\n  var rowId = rowIndex !== undefined ? rowIndex : -1;\n  /**\n   * @param {React.FormEvent} event - React form event\n   */\n  function selectClick(event) {\n    var selected = rowIndex === undefined ? event.currentTarget.checked : rowData && !rowData.selected;\n    // tslint:disable-next-line:no-unused-expression\n    onSelect && onSelect(event, selected, rowId, rowData, extraData);\n  }\n  var customProps = Object.assign(Object.assign(Object.assign({}, rowId !== -1 ? {\n    checked: rowData && !!rowData.selected,\n    'aria-label': \"Select row \".concat(rowIndex)\n  } : {\n    checked: allRowsSelected,\n    'aria-label': 'Select all rows'\n  }), rowData && (rowData.disableCheckbox || rowData.disableSelection) && {\n    disabled: true,\n    className: checkStyles.checkInput\n  }), !rowData && isHeaderSelectDisabled && {\n    disabled: true\n  });\n  var selectName = 'check-all';\n  if (rowId !== -1 && selectVariant === RowSelectVariant.checkbox) {\n    selectName = \"checkrow\".concat(rowIndex);\n  } else if (rowId !== -1) {\n    selectName = 'radioGroup';\n  }\n  return {\n    className: css(styles.tableCheck),\n    component: 'td',\n    isVisible: !rowData || !rowData.fullWidth,\n    children: React.createElement(SelectColumn, Object.assign({}, customProps, {\n      selectVariant: selectVariant,\n      onSelect: selectClick,\n      name: selectName\n    }), label)\n  };\n};","map":{"version":3,"names":["React","css","styles","SelectColumn","RowSelectVariant","checkStyles","selectable","label","_ref","rowIndex","columnIndex","rowData","column","property","_column$extraParams","extraParams","onSelect","selectVariant","allRowsSelected","isHeaderSelectDisabled","extraData","hasOwnProperty","showSelect","fullWidth","component","isVisible","rowId","undefined","selectClick","event","selected","currentTarget","checked","customProps","Object","assign","concat","disableCheckbox","disableSelection","disabled","className","checkInput","selectName","checkbox","tableCheck","children","createElement","name"],"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/utils/decorators/selectable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { IExtra, IFormatterValueType, ITransform } from '../../TableTypes';\nimport { SelectColumn, RowSelectVariant } from '../../SelectColumn';\nimport checkStyles from '@patternfly/react-styles/css/components/Check/check';\n\nexport const selectable: ITransform = (\n  label: IFormatterValueType,\n  { rowIndex, columnIndex, rowData, column, property }: IExtra\n) => {\n  const {\n    extraParams: { onSelect, selectVariant, allRowsSelected, isHeaderSelectDisabled }\n  } = column;\n  const extraData = {\n    rowIndex,\n    columnIndex,\n    column,\n    property\n  };\n\n  if (rowData && rowData.hasOwnProperty('parent') && !rowData.showSelect && !rowData.fullWidth) {\n    return {\n      component: 'td',\n      isVisible: true\n    };\n  }\n  const rowId = rowIndex !== undefined ? rowIndex : -1;\n\n  /**\n   * @param {React.FormEvent} event - React form event\n   */\n  function selectClick(event: React.FormEvent<HTMLInputElement>) {\n    const selected = rowIndex === undefined ? event.currentTarget.checked : rowData && !rowData.selected;\n    // tslint:disable-next-line:no-unused-expression\n    onSelect && onSelect(event, selected, rowId, rowData, extraData);\n  }\n  const customProps = {\n    ...(rowId !== -1\n      ? {\n          checked: rowData && !!rowData.selected,\n          'aria-label': `Select row ${rowIndex}`\n        }\n      : {\n          checked: allRowsSelected,\n          'aria-label': 'Select all rows'\n        }),\n    ...(rowData &&\n      (rowData.disableCheckbox || rowData.disableSelection) && {\n        disabled: true,\n        className: checkStyles.checkInput\n      }),\n    ...(!rowData && isHeaderSelectDisabled && { disabled: true })\n  };\n  let selectName = 'check-all';\n  if (rowId !== -1 && selectVariant === RowSelectVariant.checkbox) {\n    selectName = `checkrow${rowIndex}`;\n  } else if (rowId !== -1) {\n    selectName = 'radioGroup';\n  }\n\n  return {\n    className: css(styles.tableCheck),\n    component: 'td',\n    isVisible: !rowData || !rowData.fullWidth,\n    children: (\n      <SelectColumn\n        {...customProps}\n        selectVariant={selectVariant as RowSelectVariant}\n        onSelect={selectClick}\n        name={selectName}\n      >\n        {label as React.ReactNode}\n      </SelectColumn>\n    )\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}