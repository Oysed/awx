{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { CollapseColumn } from '../../CollapseColumn';\nimport { ExpandableRowContent } from '../../ExpandableRowContent';\nexport var collapsible = function collapsible(value, _ref) {\n  var rowIndex = _ref.rowIndex,\n    columnIndex = _ref.columnIndex,\n    rowData = _ref.rowData,\n    column = _ref.column,\n    property = _ref.property;\n  var _column$extraParams = column.extraParams,\n    onCollapse = _column$extraParams.onCollapse,\n    _column$extraParams$r = _column$extraParams.rowLabeledBy,\n    rowLabeledBy = _column$extraParams$r === void 0 ? 'simple-node' : _column$extraParams$r,\n    _column$extraParams$e = _column$extraParams.expandId,\n    expandId = _column$extraParams$e === void 0 ? 'expand-toggle' : _column$extraParams$e,\n    allRowsExpanded = _column$extraParams.allRowsExpanded,\n    collapseAllAriaLabel = _column$extraParams.collapseAllAriaLabel;\n  var extraData = {\n    rowIndex: rowIndex,\n    columnIndex: columnIndex,\n    column: column,\n    property: property\n  };\n  var rowId = rowIndex !== undefined ? rowIndex : -1;\n  var customProps = Object.assign({}, rowId !== -1 ? {\n    isOpen: rowData === null || rowData === void 0 ? void 0 : rowData.isOpen,\n    'aria-labelledby': \"\".concat(rowLabeledBy).concat(rowId, \" \").concat(expandId).concat(rowId)\n  } : {\n    isOpen: allRowsExpanded,\n    'aria-label': collapseAllAriaLabel || 'Expand all rows'\n  });\n  /**\n   * @param {React.MouseEvent} event - Mouse event\n   */\n  function onToggle(event) {\n    var open = rowData ? !rowData.isOpen : !allRowsExpanded;\n    // tslint:disable-next-line:no-unused-expression\n    onCollapse && onCollapse(event, rowIndex, open, rowData, extraData);\n  }\n  return {\n    className: ((rowData === null || rowData === void 0 ? void 0 : rowData.isOpen) !== undefined || rowId === -1) && css(styles.tableToggle),\n    isVisible: !(rowData === null || rowData === void 0 ? void 0 : rowData.fullWidth),\n    children: React.createElement(CollapseColumn, Object.assign({\n      \"aria-labelledby\": \"\".concat(rowLabeledBy).concat(rowId, \" \").concat(expandId).concat(rowId),\n      onToggle: onToggle,\n      id: expandId + rowId\n    }, customProps), value)\n  };\n};\nexport var expandable = function expandable(value, _ref2) {\n  var rowData = _ref2.rowData;\n  return rowData && rowData.hasOwnProperty('parent') ? React.createElement(ExpandableRowContent, null, value) : value;\n};\nexport var expandedRow = function expandedRow(colSpan) {\n  var additionalColSpan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var expandedRowFormatter = function expandedRowFormatter(value, _ref3) {\n    var columnIndex = _ref3.columnIndex,\n      rowIndex = _ref3.rowIndex,\n      rowData = _ref3.rowData,\n      _ref3$column$extraPar = _ref3.column.extraParams.contentId,\n      contentId = _ref3$column$extraPar === void 0 ? 'expanded-content' : _ref3$column$extraPar;\n    return value && rowData.hasOwnProperty('parent') && {\n      colSpan: !rowData.cells || rowData.cells.length === 1 ? colSpan + (rowData.fullWidth ? additionalColSpan + 1 : 0) : 1,\n      id: contentId + rowIndex + (columnIndex ? '-' + columnIndex : ''),\n      className: rowData.noPadding && css(styles.modifiers.noPadding)\n    };\n  };\n  return expandedRowFormatter;\n};","map":{"version":3,"names":["React","css","styles","CollapseColumn","ExpandableRowContent","collapsible","value","_ref","rowIndex","columnIndex","rowData","column","property","_column$extraParams","extraParams","onCollapse","_column$extraParams$r","rowLabeledBy","_column$extraParams$e","expandId","allRowsExpanded","collapseAllAriaLabel","extraData","rowId","undefined","customProps","Object","assign","isOpen","concat","onToggle","event","open","className","tableToggle","isVisible","fullWidth","children","createElement","id","expandable","_ref2","hasOwnProperty","expandedRow","colSpan","additionalColSpan","arguments","length","expandedRowFormatter","_ref3","_ref3$column$extraPar","contentId","cells","noPadding","modifiers"],"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/utils/decorators/collapsible.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { CollapseColumn } from '../../CollapseColumn';\nimport { ExpandableRowContent } from '../../ExpandableRowContent';\nimport { IExtra, IFormatterValueType, IFormatter, decoratorReturnType } from '../../TableTypes';\n\nexport const collapsible: IFormatter = (\n  value: IFormatterValueType,\n  { rowIndex, columnIndex, rowData, column, property }: IExtra\n) => {\n  const {\n    extraParams: {\n      onCollapse,\n      rowLabeledBy = 'simple-node',\n      expandId = 'expand-toggle',\n      allRowsExpanded,\n      collapseAllAriaLabel\n    }\n  } = column;\n  const extraData = {\n    rowIndex,\n    columnIndex,\n    column,\n    property\n  };\n\n  const rowId = rowIndex !== undefined ? rowIndex : -1;\n\n  const customProps = {\n    ...(rowId !== -1\n      ? {\n          isOpen: rowData?.isOpen,\n          'aria-labelledby': `${rowLabeledBy}${rowId} ${expandId}${rowId}`\n        }\n      : {\n          isOpen: allRowsExpanded,\n          'aria-label': collapseAllAriaLabel || 'Expand all rows'\n        })\n  };\n\n  /**\n   * @param {React.MouseEvent} event - Mouse event\n   */\n  function onToggle(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    const open = rowData ? !rowData.isOpen : !allRowsExpanded;\n    // tslint:disable-next-line:no-unused-expression\n    onCollapse && onCollapse(event, rowIndex, open, rowData, extraData);\n  }\n\n  return {\n    className: (rowData?.isOpen !== undefined || rowId === -1) && css(styles.tableToggle),\n    isVisible: !rowData?.fullWidth,\n    children: (\n      <CollapseColumn\n        aria-labelledby={`${rowLabeledBy}${rowId} ${expandId}${rowId}`}\n        onToggle={onToggle}\n        id={expandId + rowId}\n        {...customProps}\n      >\n        {value as React.ReactNode}\n      </CollapseColumn>\n    )\n  };\n};\n\nexport const expandable: IFormatter = (value: IFormatterValueType, { rowData }: IExtra) =>\n  rowData && rowData.hasOwnProperty('parent') ? (\n    <ExpandableRowContent>{value as React.ReactNode}</ExpandableRowContent>\n  ) : (\n    value\n  );\n\nexport const expandedRow = (colSpan?: number, additionalColSpan: number = 0) => {\n  const expandedRowFormatter = (\n    value: IFormatterValueType,\n    {\n      columnIndex,\n      rowIndex,\n      rowData,\n      column: {\n        extraParams: { contentId = 'expanded-content' }\n      }\n    }: IExtra\n  ): decoratorReturnType =>\n    value &&\n    rowData.hasOwnProperty('parent') && {\n      colSpan:\n        !rowData.cells || rowData.cells.length === 1 ? colSpan + (rowData.fullWidth ? additionalColSpan + 1 : 0) : 1,\n      id: contentId + rowIndex + (columnIndex ? '-' + columnIndex : ''),\n      className: rowData.noPadding && css(styles.modifiers.noPadding)\n    };\n  return expandedRowFormatter;\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,qDAAqD;AACxE,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,oBAAoB,QAAQ,4BAA4B;AAGjE,OAAO,IAAMC,WAAW,GAAe,SAA1BA,WAAWA,CACtBC,KAA0B,EAAAC,IAAA,EAExB;EAAA,IADAC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IAAEC,WAAW,GAAAF,IAAA,CAAXE,WAAW;IAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;IAAEC,MAAM,GAAAJ,IAAA,CAANI,MAAM;IAAEC,QAAQ,GAAAL,IAAA,CAARK,QAAQ;EAElD,IAAAC,mBAAA,GAQIF,MAAM,CAPRG,WAAW;IACTC,UAAU,GAAAF,mBAAA,CAAVE,UAAU;IAAAC,qBAAA,GAAAH,mBAAA,CACVI,YAAY;IAAZA,YAAY,GAAAD,qBAAA,cAAG,aAAa,GAAAA,qBAAA;IAAAE,qBAAA,GAAAL,mBAAA,CAC5BM,QAAQ;IAARA,QAAQ,GAAAD,qBAAA,cAAG,eAAe,GAAAA,qBAAA;IAC1BE,eAAe,GAAAP,mBAAA,CAAfO,eAAe;IACfC,oBAAoB,GAAAR,mBAAA,CAApBQ,oBAAoB;EAGxB,IAAMC,SAAS,GAAG;IAChBd,QAAQ,EAARA,QAAQ;IACRC,WAAW,EAAXA,WAAW;IACXE,MAAM,EAANA,MAAM;IACNC,QAAQ,EAARA;GACD;EAED,IAAMW,KAAK,GAAGf,QAAQ,KAAKgB,SAAS,GAAGhB,QAAQ,GAAG,CAAC,CAAC;EAEpD,IAAMiB,WAAW,GAAAC,MAAA,CAAAC,MAAA,KACXJ,KAAK,KAAK,CAAC,CAAC,GACZ;IACEK,MAAM,EAAElB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEkB,MAAM;IACvB,iBAAiB,KAAAC,MAAA,CAAKZ,YAAY,EAAAY,MAAA,CAAGN,KAAK,OAAAM,MAAA,CAAIV,QAAQ,EAAAU,MAAA,CAAGN,KAAK;GAC/D,GACD;IACEK,MAAM,EAAER,eAAe;IACvB,YAAY,EAAEC,oBAAoB,IAAI;GACtC,CACP;EAED;;;EAGA,SAASS,QAAQA,CAACC,KAAsD;IACtE,IAAMC,IAAI,GAAGtB,OAAO,GAAG,CAACA,OAAO,CAACkB,MAAM,GAAG,CAACR,eAAe;IACzD;IACAL,UAAU,IAAIA,UAAU,CAACgB,KAAK,EAAEvB,QAAQ,EAAEwB,IAAI,EAAEtB,OAAO,EAAEY,SAAS,CAAC;EACrE;EAEA,OAAO;IACLW,SAAS,EAAE,CAAC,CAAAvB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEkB,MAAM,MAAKJ,SAAS,IAAID,KAAK,KAAK,CAAC,CAAC,KAAKtB,GAAG,CAACC,MAAM,CAACgC,WAAW,CAAC;IACrFC,SAAS,EAAE,EAACzB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE0B,SAAS;IAC9BC,QAAQ,EACNrC,KAAA,CAAAsC,aAAA,CAACnC,cAAc,EAAAuB,MAAA,CAAAC,MAAA;MAAA,sBAAAE,MAAA,CACOZ,YAAY,EAAAY,MAAA,CAAGN,KAAK,OAAAM,MAAA,CAAIV,QAAQ,EAAAU,MAAA,CAAGN,KAAK,CAAE;MAC9DO,QAAQ,EAAEA,QAAQ;MAClBS,EAAE,EAAEpB,QAAQ,GAAGI;IAAK,GAChBE,WAAW,GAEdnB,KAAwB;GAG9B;AACH,CAAC;AAED,OAAO,IAAMkC,UAAU,GAAe,SAAzBA,UAAUA,CAAgBlC,KAA0B,EAAAmC,KAAA;EAAA,IAAI/B,OAAO,GAAA+B,KAAA,CAAP/B,OAAO;EAAA,OAC1EA,OAAO,IAAIA,OAAO,CAACgC,cAAc,CAAC,QAAQ,CAAC,GACzC1C,KAAA,CAAAsC,aAAA,CAAClC,oBAAoB,QAAEE,KAAwB,CAAwB,GAEvEA,KACD;AAAA;AAEH,OAAO,IAAMqC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,OAAgB,EAAmC;EAAA,IAAjCC,iBAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAtB,SAAA,GAAAsB,SAAA,MAA4B,CAAC;EACzE,IAAME,oBAAoB,GAAG,SAAvBA,oBAAoBA,CACxB1C,KAA0B,EAAA2C,KAAA;IAAA,IAExBxC,WAAW,GAAAwC,KAAA,CAAXxC,WAAW;MACXD,QAAQ,GAAAyC,KAAA,CAARzC,QAAQ;MACRE,OAAO,GAAAuC,KAAA,CAAPvC,OAAO;MAAAwC,qBAAA,GAAAD,KAAA,CACPtC,MAAM,CACJG,WAAW,CAAIqC,SAAS;MAATA,SAAS,GAAAD,qBAAA,cAAG,kBAAkB,GAAAA,qBAAA;IAAA,OAIjD5C,KAAK,IACLI,OAAO,CAACgC,cAAc,CAAC,QAAQ,CAAC,IAAI;MAClCE,OAAO,EACL,CAAClC,OAAO,CAAC0C,KAAK,IAAI1C,OAAO,CAAC0C,KAAK,CAACL,MAAM,KAAK,CAAC,GAAGH,OAAO,IAAIlC,OAAO,CAAC0B,SAAS,GAAGS,iBAAiB,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MAC9GN,EAAE,EAAEY,SAAS,GAAG3C,QAAQ,IAAIC,WAAW,GAAG,GAAG,GAAGA,WAAW,GAAG,EAAE,CAAC;MACjEwB,SAAS,EAAEvB,OAAO,CAAC2C,SAAS,IAAIpD,GAAG,CAACC,MAAM,CAACoD,SAAS,CAACD,SAAS;KAC/D;EAAA;EACH,OAAOL,oBAAoB;AAC7B,CAAC"},"metadata":{},"sourceType":"module"}