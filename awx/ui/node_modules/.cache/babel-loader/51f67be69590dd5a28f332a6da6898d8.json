{"ast":null,"code":"/**\n * The debounce utility creates a debounced version of the provided\n * function. The debounced function delays invocation until after\n * the given time interval (milliseconds) has elapsed since the last\n * time the function was called. This means that if you call the\n * debounced function repeatedly, it will only run once after it\n * stops being called.\n */var debounce=function debounce(func,interval){var timeout;return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}clearTimeout(timeout);timeout=setTimeout(function(){func.apply(void 0,args);},interval);};};export default debounce;","map":{"version":3,"names":["debounce","func","interval","timeout","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","apply"],"sources":["/awx_devel/awx/ui/src/util/debounce.js"],"sourcesContent":["/**\n * The debounce utility creates a debounced version of the provided\n * function. The debounced function delays invocation until after\n * the given time interval (milliseconds) has elapsed since the last\n * time the function was called. This means that if you call the\n * debounced function repeatedly, it will only run once after it\n * stops being called.\n */\nconst debounce = (func, interval) => {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      func(...args);\n    }, interval);\n  };\n};\n\nexport default debounce;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,GAAM,CAAAA,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAIC,IAAI,CAAEC,QAAQ,CAAK,CACnC,GAAI,CAAAC,OAAO,CACX,MAAO,WAAa,SAAAC,IAAA,CAAAC,SAAA,CAAAC,MAAA,CAATC,IAAI,KAAAC,KAAA,CAAAJ,IAAA,EAAAK,IAAA,GAAAA,IAAA,CAAAL,IAAA,CAAAK,IAAA,IAAJF,IAAI,CAAAE,IAAA,EAAAJ,SAAA,CAAAI,IAAA,GACbC,YAAY,CAACP,OAAO,CAAC,CACrBA,OAAO,CAAGQ,UAAU,CAAC,UAAM,CACzBV,IAAI,CAAAW,KAAA,QAAIL,IAAI,CAAC,CACf,CAAC,CAAEL,QAAQ,CAAC,CACd,CAAC,CACH,CAAC,CAED,cAAe,CAAAF,QAAQ"},"metadata":{},"sourceType":"module"}