{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"credential\"];import{i18n}from\"@lingui/core\";import React from'react';import{Chip}from'@patternfly/react-core';import{Credential}from'types';import{toTitleCase}from'util/strings';import{jsxs as _jsxs}from\"react/jsx-runtime\";function CredentialChip(_ref){var credential=_ref.credential,props=_objectWithoutProperties(_ref,_excluded);var type;if(credential.cloud){type=/*i18n*/i18n._(\"Cloud\");}else if(credential.kind==='gpg_public_key'){type=/*i18n*/i18n._(\"GPG Public Key\");}else if(credential.kind==='aws'||credential.kind==='ssh'){type=credential.kind.toUpperCase();}else{type=toTitleCase(credential.kind);}var buildCredentialName=function buildCredentialName(){var _credential$inputs;if(credential.kind==='vault'&&(_credential$inputs=credential.inputs)!==null&&_credential$inputs!==void 0&&_credential$inputs.vault_id){return\"\".concat(credential.name,\" | \").concat(credential.inputs.vault_id);}return\"\".concat(credential.name);};return/*#__PURE__*/_jsxs(Chip,_objectSpread(_objectSpread({},props),{},{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[type,\": \"]}),buildCredentialName()]}));}export{CredentialChip as _CredentialChip};export default CredentialChip;","map":{"version":3,"names":["React","Chip","Credential","toTitleCase","jsxs","_jsxs","CredentialChip","_ref","credential","props","_objectWithoutProperties","_excluded","type","cloud","i18n","_","kind","toUpperCase","buildCredentialName","_credential$inputs","inputs","vault_id","concat","name","_objectSpread","children","_CredentialChip"],"sources":["/awx_devel/awx/ui/src/components/CredentialChip/CredentialChip.js"],"sourcesContent":["import React from 'react';\n\nimport { t } from '@lingui/macro';\nimport { Chip } from '@patternfly/react-core';\nimport { Credential } from 'types';\nimport { toTitleCase } from 'util/strings';\n\nfunction CredentialChip({ credential, ...props }) {\n  let type;\n  if (credential.cloud) {\n    type = t`Cloud`;\n  } else if (credential.kind === 'gpg_public_key') {\n    type = t`GPG Public Key`;\n  } else if (credential.kind === 'aws' || credential.kind === 'ssh') {\n    type = credential.kind.toUpperCase();\n  } else {\n    type = toTitleCase(credential.kind);\n  }\n\n  const buildCredentialName = () => {\n    if (credential.kind === 'vault' && credential.inputs?.vault_id) {\n      return `${credential.name} | ${credential.inputs.vault_id}`;\n    }\n    return `${credential.name}`;\n  };\n\n  return (\n    <Chip {...props}>\n      <strong>{type}: </strong>\n      {buildCredentialName()}\n    </Chip>\n  );\n}\nCredentialChip.propTypes = {\n  credential: Credential.isRequired,\n};\n\nexport { CredentialChip as _CredentialChip };\nexport default CredentialChip;\n"],"mappings":"6RAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAGzB,OAASC,IAAI,KAAQ,wBAAwB,CAC7C,OAASC,UAAU,KAAQ,OAAO,CAClC,OAASC,WAAW,KAAQ,cAAc,CAAC,OAAAC,IAAA,IAAAC,KAAA,yBAE3C,QAAS,CAAAC,cAAcA,CAAAC,IAAA,CAA2B,IAAxB,CAAAC,UAAU,CAAAD,IAAA,CAAVC,UAAU,CAAKC,KAAK,CAAAC,wBAAA,CAAAH,IAAA,CAAAI,SAAA,EAC5C,GAAI,CAAAC,IAAI,CACR,GAAIJ,UAAU,CAACK,KAAK,CAAE,CACpBD,IAAI,SAAGE,IAAA,CAAAC,CAAA,QAAO,CAAC,CACjB,CAAC,IAAM,IAAIP,UAAU,CAACQ,IAAI,GAAK,gBAAgB,CAAE,CAC/CJ,IAAI,SAAGE,IAAA,CAAAC,CAAA,iBAAgB,CAAC,CAC1B,CAAC,IAAM,IAAIP,UAAU,CAACQ,IAAI,GAAK,KAAK,EAAIR,UAAU,CAACQ,IAAI,GAAK,KAAK,CAAE,CACjEJ,IAAI,CAAGJ,UAAU,CAACQ,IAAI,CAACC,WAAW,CAAC,CAAC,CACtC,CAAC,IAAM,CACLL,IAAI,CAAGT,WAAW,CAACK,UAAU,CAACQ,IAAI,CAAC,CACrC,CAEA,GAAM,CAAAE,mBAAmB,CAAG,QAAtB,CAAAA,mBAAmBA,CAAA,CAAS,KAAAC,kBAAA,CAChC,GAAIX,UAAU,CAACQ,IAAI,GAAK,OAAO,GAAAG,kBAAA,CAAIX,UAAU,CAACY,MAAM,UAAAD,kBAAA,WAAjBA,kBAAA,CAAmBE,QAAQ,CAAE,CAC9D,SAAAC,MAAA,CAAUd,UAAU,CAACe,IAAI,QAAAD,MAAA,CAAMd,UAAU,CAACY,MAAM,CAACC,QAAQ,EAC3D,CACA,SAAAC,MAAA,CAAUd,UAAU,CAACe,IAAI,EAC3B,CAAC,CAED,mBACElB,KAAA,CAACJ,IAAI,CAAAuB,aAAA,CAAAA,aAAA,IAAKf,KAAK,MAAAgB,QAAA,eACbpB,KAAA,WAAAoB,QAAA,EAASb,IAAI,CAAC,IAAE,EAAQ,CAAC,CACxBM,mBAAmB,CAAC,CAAC,GAClB,CAAC,CAEX,CAKA,OAASZ,cAAc,GAAI,CAAAoB,eAAe,EAC1C,cAAe,CAAApB,cAAc"},"metadata":{},"sourceType":"module"}