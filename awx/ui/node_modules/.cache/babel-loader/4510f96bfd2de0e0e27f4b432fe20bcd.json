{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * evaluate-transforms.ts\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport { mergeProps } from './merge-props';\n/**\n * @param {transformsType} transforms - transforms type\n * @param {string | object} value - value\n * @param {ExtraParamsType} extraParameters - extra params type\n */\nexport function evaluateTransforms() {\n  var transforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var value = arguments.length > 1 ? arguments[1] : undefined;\n  var extraParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (process.env.NODE_ENV !== 'production') {\n    if (!transforms.every(function (f) {\n      return typeof f === 'function';\n    })) {\n      throw new Error(\"All transforms weren't functions!\");\n    }\n  }\n  if (transforms.length === 0) {\n    return {};\n  }\n  return mergeProps.apply(void 0, _toConsumableArray(transforms.map(function (transform) {\n    return transform(value, extraParameters);\n  })));\n}","map":{"version":3,"names":["mergeProps","evaluateTransforms","transforms","arguments","length","undefined","value","extraParameters","process","env","NODE_ENV","every","f","Error","apply","_toConsumableArray","map","transform"],"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/base/evaluate-transforms.ts"],"sourcesContent":["/**\n * evaluate-transforms.ts\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport { mergeProps } from './merge-props';\nimport { transformsType, ExtraParamsType } from './types';\n\n/**\n * @param {transformsType} transforms - transforms type\n * @param {string | object} value - value\n * @param {ExtraParamsType} extraParameters - extra params type\n */\nexport function evaluateTransforms(\n  transforms: transformsType = [],\n  value: string | object,\n  extraParameters: ExtraParamsType = {}\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!transforms.every(f => typeof f === 'function')) {\n      throw new Error(\"All transforms weren't functions!\");\n    }\n  }\n\n  if (transforms.length === 0) {\n    return {};\n  }\n\n  return mergeProps(...transforms.map(transform => transform(value, extraParameters)));\n}\n"],"mappings":";AAAA;;;;;;AAMA,SAASA,UAAU,QAAQ,eAAe;AAG1C;;;;;AAKA,OAAM,SAAUC,kBAAkBA,CAAA,EAGK;EAAA,IAFrCC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA6B,EAAE;EAAA,IAC/BG,KAAsB,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IACtBE,eAAA,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmC,EAAE;EAErC,IAAIK,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAI,CAACR,UAAU,CAACS,KAAK,CAAC,UAAAC,CAAC;MAAA,OAAI,OAAOA,CAAC,KAAK,UAAU;IAAA,EAAC,EAAE;MACnD,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;;;EAIxD,IAAIX,UAAU,CAACE,MAAM,KAAK,CAAC,EAAE;IAC3B,OAAO,EAAE;;EAGX,OAAOJ,UAAU,CAAAc,KAAA,SAAAC,kBAAA,CAAIb,UAAU,CAACc,GAAG,CAAC,UAAAC,SAAS;IAAA,OAAIA,SAAS,CAACX,KAAK,EAAEC,eAAe,CAAC;EAAA,EAAC,EAAC;AACtF"},"metadata":{},"sourceType":"module"}