{"ast":null,"code":"import _toConsumableArray from \"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * merge-props.js\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport mergeWith from 'lodash/mergeWith';\nimport { css } from '@patternfly/react-styles';\n/**\n * @param {any} props - Props\n */\nexport function mergeProps() {\n  for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n    props[_key] = arguments[_key];\n  }\n  var firstProps = props[0];\n  var restProps = props.slice(1);\n  if (!restProps.length) {\n    return mergeWith({}, firstProps);\n  }\n  // Avoid mutating the first prop collection\n  return mergeWith.apply(void 0, [mergeWith({}, firstProps)].concat(_toConsumableArray(restProps), [function (a, b, key) {\n    if (key === 'children') {\n      if (a && b) {\n        // compose the two\n        return React.cloneElement(a, {\n          children: b\n        });\n      }\n      // Children have to be merged in reverse order for Reactabular\n      // logic to work.\n      return Object.assign(Object.assign({}, b), a);\n    }\n    if (key === 'className') {\n      // Process class names through classNames to merge properly\n      // as a string.\n      return css(a, b);\n    }\n    return undefined;\n  }]));\n}","map":{"version":3,"names":["React","mergeWith","css","mergeProps","_len","arguments","length","props","Array","_key","firstProps","restProps","slice","apply","concat","_toConsumableArray","a","b","key","cloneElement","children","Object","assign","undefined"],"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/base/merge-props.ts"],"sourcesContent":["/**\n * merge-props.js\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport mergeWith from 'lodash/mergeWith';\nimport { css } from '@patternfly/react-styles';\n\n/**\n * @param {any} props - Props\n */\nexport function mergeProps(...props: any) {\n  const firstProps = props[0];\n  const restProps = props.slice(1);\n\n  if (!restProps.length) {\n    return mergeWith({}, firstProps);\n  }\n\n  // Avoid mutating the first prop collection\n  return mergeWith(mergeWith({}, firstProps), ...restProps, (a: any, b: any, key: any) => {\n    if (key === 'children') {\n      if (a && b) {\n        // compose the two\n        return React.cloneElement(a, {\n          children: b\n        });\n      }\n\n      // Children have to be merged in reverse order for Reactabular\n      // logic to work.\n      return { ...b, ...a };\n    }\n\n    if (key === 'className') {\n      // Process class names through classNames to merge properly\n      // as a string.\n      return css(a, b);\n    }\n\n    return undefined;\n  });\n}\n"],"mappings":";AAAA;;;;;;AAMA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,kBAAkB;AACxC,SAASC,GAAG,QAAQ,0BAA0B;AAE9C;;;AAGA,OAAM,SAAUC,UAAUA,CAAA,EAAc;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAVC,KAAU,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAVF,KAAU,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACtC,IAAMC,UAAU,GAAGH,KAAK,CAAC,CAAC,CAAC;EAC3B,IAAMI,SAAS,GAAGJ,KAAK,CAACK,KAAK,CAAC,CAAC,CAAC;EAEhC,IAAI,CAACD,SAAS,CAACL,MAAM,EAAE;IACrB,OAAOL,SAAS,CAAC,EAAE,EAAES,UAAU,CAAC;;EAGlC;EACA,OAAOT,SAAS,CAAAY,KAAA,UAACZ,SAAS,CAAC,EAAE,EAAES,UAAU,CAAC,EAAAI,MAAA,CAAAC,kBAAA,CAAKJ,SAAS,IAAE,UAACK,CAAM,EAAEC,CAAM,EAAEC,GAAQ,EAAI;IACrF,IAAIA,GAAG,KAAK,UAAU,EAAE;MACtB,IAAIF,CAAC,IAAIC,CAAC,EAAE;QACV;QACA,OAAOjB,KAAK,CAACmB,YAAY,CAACH,CAAC,EAAE;UAC3BI,QAAQ,EAAEH;SACX,CAAC;;MAGJ;MACA;MACA,OAAAI,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAYL,CAAC,GAAKD,CAAC;;IAGrB,IAAIE,GAAG,KAAK,WAAW,EAAE;MACvB;MACA;MACA,OAAOhB,GAAG,CAACc,CAAC,EAAEC,CAAC,CAAC;;IAGlB,OAAOM,SAAS;EAClB,CAAC,GAAC;AACJ"},"metadata":{},"sourceType":"module"}