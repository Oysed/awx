{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Select } from '@patternfly/react-core/dist/esm/components/Select';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nexport var EditableSelectInputCell = function EditableSelectInputCell(_ref) {\n  var value = _ref.value,\n    rowIndex = _ref.rowIndex,\n    cellIndex = _ref.cellIndex,\n    _ref$onSelect = _ref.onSelect,\n    onSelect = _ref$onSelect === void 0 ? function () {} : _ref$onSelect,\n    clearSelection = _ref.clearSelection,\n    _ref$isOpen = _ref.isOpen,\n    isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,\n    _ref$onToggle = _ref.onToggle,\n    onToggle = _ref$onToggle === void 0 ? function () {} : _ref$onToggle,\n    _ref$selections = _ref.selections,\n    selections = _ref$selections === void 0 ? [''] : _ref$selections,\n    _ref$options = _ref.options,\n    options = _ref$options === void 0 ? [] : _ref$options,\n    props = _ref.props;\n  var onSelectHandler = function onSelectHandler(event, newValue, isPlaceholder) {\n    onSelect(newValue, event, rowIndex, cellIndex, isPlaceholder);\n  };\n  var onClear = function onClear(event) {\n    clearSelection(rowIndex, cellIndex, event);\n  };\n  var select = React.createElement(Select, Object.assign({}, props.editableSelectProps, {\n    onSelect: onSelectHandler\n  }, clearSelection && {\n    onClear: onClear\n  }, {\n    isOpen: isOpen,\n    onToggle: onToggle,\n    selections: selections\n  }), options);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: inlineStyles.inlineEditValue\n  }, Array.isArray(value) ? value.join(', ') : value), React.createElement(\"div\", {\n    className: inlineStyles.inlineEditInput\n  }, select, React.createElement(\"div\", {\n    className: css(formStyles.formHelperText, formStyles.modifiers.error),\n    \"aria-live\": \"polite\"\n  }, props.errorText)));\n};\nEditableSelectInputCell.displayName = 'EditableSelectInputCell';","map":{"version":3,"names":["React","css","Select","inlineStyles","formStyles","EditableSelectInputCell","_ref","value","rowIndex","cellIndex","_ref$onSelect","onSelect","clearSelection","_ref$isOpen","isOpen","_ref$onToggle","onToggle","_ref$selections","selections","_ref$options","options","props","onSelectHandler","event","newValue","isPlaceholder","onClear","select","createElement","Object","assign","editableSelectProps","Fragment","className","inlineEditValue","Array","isArray","join","inlineEditInput","formHelperText","modifiers","error","errorText","displayName"],"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/EditableSelectInputCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Select, SelectOptionObject } from '@patternfly/react-core/dist/esm/components/Select';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { EditableSelectInputProps } from './base';\n\nexport interface IEditableSelectInputCell extends Omit<React.HTMLProps<HTMLElement | HTMLDivElement>, 'onSelect'> {\n  /** Row index of this select input cell */\n  rowIndex: number;\n  /** Cell index of this select input cell */\n  cellIndex: number;\n  /** Props to build the select component */\n  props: EditableSelectInputProps;\n  /** Event handler which fires when user selects an option in this cell */\n  onSelect: (\n    newValue: string | SelectOptionObject,\n    event: React.MouseEvent | React.ChangeEvent,\n    rowIndex: number,\n    cellIndex: number,\n    isPlaceholder?: boolean\n  ) => void;\n  /** Options to display in the expandable select menu */\n  options?: React.ReactElement[];\n  /** Flag indicating the select input is disabled */\n  isDisabled?: boolean;\n  /** Current selected options to display as the read only value of the table cell */\n  selections?: string | SelectOptionObject | (string | SelectOptionObject)[];\n  /** Flag indicating the select menu is open */\n  isOpen?: boolean;\n  /** Event handler which fires when the select toggle is toggled */\n  onToggle?: (isExpanded: boolean) => void;\n  /** Event handler which fires when the user clears the selections */\n  clearSelection?: (rowIndex: number, cellIndex: number, event?: React.MouseEvent) => void;\n}\n\nexport const EditableSelectInputCell: React.FunctionComponent<IEditableSelectInputCell> = ({\n  value,\n  rowIndex,\n  cellIndex,\n  onSelect = () => {},\n  clearSelection,\n  isOpen = false,\n  onToggle = () => {},\n  selections = [''],\n  options = [] as React.ReactElement[],\n  props\n}: IEditableSelectInputCell) => {\n  const onSelectHandler = (\n    event: React.MouseEvent | React.ChangeEvent,\n    newValue: string | SelectOptionObject,\n    isPlaceholder: boolean\n  ) => {\n    onSelect(newValue, event, rowIndex, cellIndex, isPlaceholder);\n  };\n\n  const onClear = (event: React.MouseEvent) => {\n    clearSelection(rowIndex, cellIndex, event);\n  };\n\n  const select = (\n    <Select\n      {...props.editableSelectProps}\n      onSelect={onSelectHandler}\n      {...(clearSelection && { onClear })}\n      isOpen={isOpen}\n      onToggle={onToggle}\n      selections={selections}\n    >\n      {options}\n    </Select>\n  );\n\n  return (\n    <React.Fragment>\n      <div className={inlineStyles.inlineEditValue}>{Array.isArray(value) ? value.join(', ') : value}</div>\n      <div className={inlineStyles.inlineEditInput}>\n        {select}\n        <div className={css(formStyles.formHelperText, formStyles.modifiers.error)} aria-live=\"polite\">\n          {props.errorText}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\nEditableSelectInputCell.displayName = 'EditableSelectInputCell';\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,SAASC,MAAM,QAA4B,mDAAmD;AAC9F,OAAOC,YAAY,MAAM,gEAAgE;AACzF,OAAOC,UAAU,MAAM,mDAAmD;AAgC1E,OAAO,IAAMC,uBAAuB,GAAsD,SAA7EA,uBAAuBA,CAAAC,IAAA,EAWL;EAAA,IAV7BC,KAAK,GAAAD,IAAA,CAALC,KAAK;IACLC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IACRC,SAAS,GAAAH,IAAA,CAATG,SAAS;IAAAC,aAAA,GAAAJ,IAAA,CACTK,QAAQ;IAARA,QAAQ,GAAAD,aAAA,cAAG,YAAK,CAAE,CAAC,GAAAA,aAAA;IACnBE,cAAc,GAAAN,IAAA,CAAdM,cAAc;IAAAC,WAAA,GAAAP,IAAA,CACdQ,MAAM;IAANA,MAAM,GAAAD,WAAA,cAAG,KAAK,GAAAA,WAAA;IAAAE,aAAA,GAAAT,IAAA,CACdU,QAAQ;IAARA,QAAQ,GAAAD,aAAA,cAAG,YAAK,CAAE,CAAC,GAAAA,aAAA;IAAAE,eAAA,GAAAX,IAAA,CACnBY,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,CAAC,EAAE,CAAC,GAAAA,eAAA;IAAAE,YAAA,GAAAb,IAAA,CACjBc,OAAO;IAAPA,OAAO,GAAAD,YAAA,cAAG,EAA0B,GAAAA,YAAA;IACpCE,KAAK,GAAAf,IAAA,CAALe,KAAK;EAEL,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CACnBC,KAA2C,EAC3CC,QAAqC,EACrCC,aAAsB,EACpB;IACFd,QAAQ,CAACa,QAAQ,EAAED,KAAK,EAAEf,QAAQ,EAAEC,SAAS,EAAEgB,aAAa,CAAC;EAC/D,CAAC;EAED,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAIH,KAAuB,EAAI;IAC1CX,cAAc,CAACJ,QAAQ,EAAEC,SAAS,EAAEc,KAAK,CAAC;EAC5C,CAAC;EAED,IAAMI,MAAM,GACV3B,KAAA,CAAA4B,aAAA,CAAC1B,MAAM,EAAA2B,MAAA,CAAAC,MAAA,KACDT,KAAK,CAACU,mBAAmB;IAC7BpB,QAAQ,EAAEW;EAAe,GACpBV,cAAc,IAAI;IAAEc,OAAO,EAAPA;EAAO,CAAE,EAAC;IACnCZ,MAAM,EAAEA,MAAM;IACdE,QAAQ,EAAEA,QAAQ;IAClBE,UAAU,EAAEA;EAAU,IAErBE,OAAO,CAEX;EAED,OACEpB,KAAA,CAAA4B,aAAA,CAAC5B,KAAK,CAACgC,QAAQ,QACbhC,KAAA,CAAA4B,aAAA;IAAKK,SAAS,EAAE9B,YAAY,CAAC+B;EAAe,GAAGC,KAAK,CAACC,OAAO,CAAC7B,KAAK,CAAC,GAAGA,KAAK,CAAC8B,IAAI,CAAC,IAAI,CAAC,GAAG9B,KAAK,CAAO,EACrGP,KAAA,CAAA4B,aAAA;IAAKK,SAAS,EAAE9B,YAAY,CAACmC;EAAe,GACzCX,MAAM,EACP3B,KAAA,CAAA4B,aAAA;IAAKK,SAAS,EAAEhC,GAAG,CAACG,UAAU,CAACmC,cAAc,EAAEnC,UAAU,CAACoC,SAAS,CAACC,KAAK,CAAC;IAAA,aAAY;EAAQ,GAC3FpB,KAAK,CAACqB,SAAS,CACZ,CACF,CACS;AAErB,CAAC;AACDrC,uBAAuB,CAACsC,WAAW,GAAG,yBAAyB"},"metadata":{},"sourceType":"module"}