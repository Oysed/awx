{"ast":null,"code":"import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _classCallCheck from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import Base from'../Base';var CredentialTypes=/*#__PURE__*/function(_Base){_inherits(CredentialTypes,_Base);var _super=_createSuper(CredentialTypes);function CredentialTypes(http){var _this;_classCallCheck(this,CredentialTypes);_this=_super.call(this,http);_this.baseUrl='api/v2/credential_types/';return _this;}_createClass(CredentialTypes,[{key:\"loadAllTypes\",value:function(){var _loadAllTypes=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var acceptableKinds,pageSize,_yield$this$read,_yield$this$read$data,next,results,nextResults,_yield$this$read2,data,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:acceptableKinds=_args.length>0&&_args[0]!==undefined?_args[0]:['machine','cloud','net','ssh','vault','kubernetes','cryptography'];pageSize=200;// The number of credential types a user can have is unlimited. In practice, it is unlikely for\n// users to have more than a page at the maximum request size.\n_context.next=4;return this.read({page_size:pageSize});case 4:_yield$this$read=_context.sent;_yield$this$read$data=_yield$this$read.data;next=_yield$this$read$data.next;results=_yield$this$read$data.results;nextResults=[];if(!next){_context.next=15;break;}_context.next=12;return this.read({page_size:pageSize,page:2});case 12:_yield$this$read2=_context.sent;data=_yield$this$read2.data;nextResults=data.results;case 15:return _context.abrupt(\"return\",results.concat(nextResults).filter(function(type){return acceptableKinds.includes(type.kind);}));case 16:case\"end\":return _context.stop();}}},_callee,this);}));function loadAllTypes(){return _loadAllTypes.apply(this,arguments);}return loadAllTypes;}()},{key:\"test\",value:function test(id,data){return this.http.post(\"\".concat(this.baseUrl).concat(id,\"/test/\"),data);}}]);return CredentialTypes;}(Base);export default CredentialTypes;","map":{"version":3,"names":["Base","CredentialTypes","_Base","_inherits","_super","_createSuper","http","_this","_classCallCheck","call","baseUrl","_createClass","key","value","_loadAllTypes","_asyncToGenerator","_regeneratorRuntime","mark","_callee","acceptableKinds","pageSize","_yield$this$read","_yield$this$read$data","next","results","nextResults","_yield$this$read2","data","_args","arguments","wrap","_callee$","_context","prev","length","undefined","read","page_size","sent","page","abrupt","concat","filter","type","includes","kind","stop","loadAllTypes","apply","test","id","post"],"sources":["/awx_devel/awx/ui/src/api/models/CredentialTypes.js"],"sourcesContent":["import Base from '../Base';\n\nclass CredentialTypes extends Base {\n  constructor(http) {\n    super(http);\n    this.baseUrl = 'api/v2/credential_types/';\n  }\n\n  async loadAllTypes(\n    acceptableKinds = [\n      'machine',\n      'cloud',\n      'net',\n      'ssh',\n      'vault',\n      'kubernetes',\n      'cryptography',\n    ]\n  ) {\n    const pageSize = 200;\n    // The number of credential types a user can have is unlimited. In practice, it is unlikely for\n    // users to have more than a page at the maximum request size.\n    const {\n      data: { next, results },\n    } = await this.read({ page_size: pageSize });\n    let nextResults = [];\n    if (next) {\n      const { data } = await this.read({\n        page_size: pageSize,\n        page: 2,\n      });\n      nextResults = data.results;\n    }\n    return results\n      .concat(nextResults)\n      .filter((type) => acceptableKinds.includes(type.kind));\n  }\n\n  test(id, data) {\n    return this.http.post(`${this.baseUrl}${id}/test/`, data);\n  }\n}\n\nexport default CredentialTypes;\n"],"mappings":"6lBAAA,MAAO,CAAAA,IAAI,KAAM,SAAS,CAAC,GAErB,CAAAC,eAAe,uBAAAC,KAAA,EAAAC,SAAA,CAAAF,eAAA,CAAAC,KAAA,MAAAE,MAAA,CAAAC,YAAA,CAAAJ,eAAA,EACnB,SAAAA,gBAAYK,IAAI,CAAE,KAAAC,KAAA,CAAAC,eAAA,MAAAP,eAAA,EAChBM,KAAA,CAAAH,MAAA,CAAAK,IAAA,MAAMH,IAAI,EACVC,KAAA,CAAKG,OAAO,CAAG,0BAA0B,CAAC,OAAAH,KAAA,CAC5C,CAACI,YAAA,CAAAV,eAAA,GAAAW,GAAA,gBAAAC,KAAA,gBAAAC,aAAA,CAAAC,iBAAA,cAAAC,mBAAA,CAAAC,IAAA,CAED,SAAAC,QAAA,MAAAC,eAAA,CAAAC,QAAA,CAAAC,gBAAA,CAAAC,qBAAA,CAAAC,IAAA,CAAAC,OAAA,CAAAC,WAAA,CAAAC,iBAAA,CAAAC,IAAA,CAAAC,KAAA,CAAAC,SAAA,QAAAb,mBAAA,CAAAc,IAAA,UAAAC,SAAAC,QAAA,kBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAT,IAAA,SACEJ,eAAe,CAAAS,KAAA,CAAAM,MAAA,IAAAN,KAAA,MAAAO,SAAA,CAAAP,KAAA,IAAG,CAChB,SAAS,CACT,OAAO,CACP,KAAK,CACL,KAAK,CACL,OAAO,CACP,YAAY,CACZ,cAAc,CACf,CAEKR,QAAQ,CAAG,GAAG,CACpB;AACA;AAAAY,QAAA,CAAAT,IAAA,SAGU,KAAI,CAACa,IAAI,CAAC,CAAEC,SAAS,CAAEjB,QAAS,CAAC,CAAC,QAAAC,gBAAA,CAAAW,QAAA,CAAAM,IAAA,CAAAhB,qBAAA,CAAAD,gBAAA,CAD1CM,IAAI,CAAIJ,IAAI,CAAAD,qBAAA,CAAJC,IAAI,CAAEC,OAAO,CAAAF,qBAAA,CAAPE,OAAO,CAEnBC,WAAW,CAAG,EAAE,KAChBF,IAAI,EAAAS,QAAA,CAAAT,IAAA,WAAAS,QAAA,CAAAT,IAAA,UACiB,KAAI,CAACa,IAAI,CAAC,CAC/BC,SAAS,CAAEjB,QAAQ,CACnBmB,IAAI,CAAE,CACR,CAAC,CAAC,SAAAb,iBAAA,CAAAM,QAAA,CAAAM,IAAA,CAHMX,IAAI,CAAAD,iBAAA,CAAJC,IAAI,CAIZF,WAAW,CAAGE,IAAI,CAACH,OAAO,CAAC,eAAAQ,QAAA,CAAAQ,MAAA,UAEtBhB,OAAO,CACXiB,MAAM,CAAChB,WAAW,CAAC,CACnBiB,MAAM,CAAC,SAACC,IAAI,QAAK,CAAAxB,eAAe,CAACyB,QAAQ,CAACD,IAAI,CAACE,IAAI,CAAC,GAAC,2BAAAb,QAAA,CAAAc,IAAA,OAAA5B,OAAA,QACzD,YAAA6B,aAAA,SAAAjC,aAAA,CAAAkC,KAAA,MAAAnB,SAAA,UAAAkB,YAAA,OAAAnC,GAAA,QAAAC,KAAA,CAED,SAAAoC,KAAKC,EAAE,CAAEvB,IAAI,CAAE,CACb,MAAO,KAAI,CAACrB,IAAI,CAAC6C,IAAI,IAAAV,MAAA,CAAI,IAAI,CAAC/B,OAAO,EAAA+B,MAAA,CAAGS,EAAE,WAAUvB,IAAI,CAAC,CAC3D,CAAC,WAAA1B,eAAA,GAtC2BD,IAAI,EAyClC,cAAe,CAAAC,eAAe"},"metadata":{},"sourceType":"module"}