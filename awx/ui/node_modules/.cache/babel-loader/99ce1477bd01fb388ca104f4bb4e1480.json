{"ast":null,"code":"/**\n * columns-are-equal.ts\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport isEqualWith from 'lodash/isEqualWith';\n/**\n * @param {ColumnsType} oldColumns - previous columns\n * @param {ColumnsType} newColumns - new columns\n */\nexport function columnsAreEqual(oldColumns, newColumns) {\n  return isEqualWith(oldColumns, newColumns, function (a, b) {\n    if (typeof a === 'function' && typeof b === 'function') {\n      return a === b;\n    }\n    return undefined;\n  });\n}","map":{"version":3,"names":["isEqualWith","columnsAreEqual","oldColumns","newColumns","a","b","undefined"],"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/base/columns-are-equal.ts"],"sourcesContent":["/**\n * columns-are-equal.ts\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport isEqualWith from 'lodash/isEqualWith';\nimport { ColumnsType } from './types';\n\n/**\n * @param {ColumnsType} oldColumns - previous columns\n * @param {ColumnsType} newColumns - new columns\n */\nexport function columnsAreEqual(oldColumns: ColumnsType, newColumns: ColumnsType) {\n  return isEqualWith(oldColumns, newColumns, (a, b) => {\n    if (typeof a === 'function' && typeof b === 'function') {\n      return a === b;\n    }\n\n    return undefined;\n  });\n}\n"],"mappings":"AAAA;;;;;;AAMA,OAAOA,WAAW,MAAM,oBAAoB;AAG5C;;;;AAIA,OAAM,SAAUC,eAAeA,CAACC,UAAuB,EAAEC,UAAuB;EAC9E,OAAOH,WAAW,CAACE,UAAU,EAAEC,UAAU,EAAE,UAACC,CAAC,EAAEC,CAAC,EAAI;IAClD,IAAI,OAAOD,CAAC,KAAK,UAAU,IAAI,OAAOC,CAAC,KAAK,UAAU,EAAE;MACtD,OAAOD,CAAC,KAAKC,CAAC;;IAGhB,OAAOC,SAAS;EAClB,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module"}