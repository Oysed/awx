{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { Tr } from '../TableComposable';\nexport var TreeRowWrapper = function TreeRowWrapper(_a) {\n  var className = _a.className,\n    rowProps = _a.rowProps,\n    row = _a.row,\n    props = __rest(_a, [\"className\", \"rowProps\", \"row\"]);\n  var _row$props = row.props,\n    level = _row$props['aria-level'],\n    posinset = _row$props['aria-posinset'],\n    setsize = _row$props['aria-setsize'],\n    isExpanded = _row$props.isExpanded,\n    isDetailsExpanded = _row$props.isDetailsExpanded,\n    isHidden = _row$props.isHidden;\n  return React.createElement(Tr, Object.assign({\n    \"aria-level\": level,\n    \"aria-posinset\": posinset,\n    \"aria-setsize\": setsize,\n    \"aria-expanded\": !!isExpanded,\n    isHidden: isHidden,\n    className: css(className, isExpanded && styles.modifiers.expanded, isDetailsExpanded && stylesTreeView.modifiers.treeViewDetailsExpanded)\n  }, props));\n};\nTreeRowWrapper.displayName = 'TreeRowWrapper';","map":{"version":3,"names":["React","css","styles","stylesTreeView","Tr","TreeRowWrapper","_a","className","rowProps","row","props","__rest","_row$props","level","posinset","setsize","isExpanded","isDetailsExpanded","isHidden","createElement","Object","assign","modifiers","expanded","treeViewDetailsExpanded","displayName"],"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/TreeRowWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { RowWrapperProps } from './RowWrapper';\nimport { Tr } from '../TableComposable';\n\nexport const TreeRowWrapper: React.FunctionComponent<RowWrapperProps> = ({\n  className,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  rowProps,\n  row,\n  ...props\n}: RowWrapperProps) => {\n  const {\n    'aria-level': level,\n    'aria-posinset': posinset,\n    'aria-setsize': setsize,\n    isExpanded,\n    isDetailsExpanded,\n    isHidden\n  } = row.props;\n  return (\n    <Tr\n      aria-level={level}\n      aria-posinset={posinset}\n      aria-setsize={setsize}\n      aria-expanded={!!isExpanded}\n      isHidden={isHidden}\n      className={css(\n        className,\n        isExpanded && styles.modifiers.expanded,\n        isDetailsExpanded && stylesTreeView.modifiers.treeViewDetailsExpanded\n      )}\n      {...props}\n    />\n  );\n};\nTreeRowWrapper.displayName = 'TreeRowWrapper';\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,QAAQ,0BAA0B;AAC9C,OAAOC,MAAM,MAAM,qDAAqD;AACxE,OAAOC,cAAc,MAAM,+DAA+D;AAE1F,SAASC,EAAE,QAAQ,oBAAoB;AAEvC,OAAO,IAAMC,cAAc,GAA6C,SAA3DA,cAAcA,CAA8CC,EAMvD,EAAI;MALpBC,SAAS,GAGND,EAEa,CALhBC,SAAS;IAETC,QAAQ,GACLF,EAEa,CAHhBE,QAAQ;IACRC,GAAG,GAAAH,EAEa,CAFhBG,GAAG;IACAC,KAAK,GAAAC,MAAA,CAAAL,EAAA,EAL+D,gCAMxE,CADS;EAER,IAAAM,UAAA,GAOIH,GAAG,CAACC,KAAK;IANGG,KAAK,GAAAD,UAAA,CAAnB,YAAY;IACKE,QAAQ,GAAAF,UAAA,CAAzB,eAAe;IACCG,OAAO,GAAAH,UAAA,CAAvB,cAAc;IACdI,UAAU,GAAAJ,UAAA,CAAVI,UAAU;IACVC,iBAAiB,GAAAL,UAAA,CAAjBK,iBAAiB;IACjBC,QAAQ,GAAAN,UAAA,CAARM,QAAQ;EAEV,OACElB,KAAA,CAAAmB,aAAA,CAACf,EAAE,EAAAgB,MAAA,CAAAC,MAAA;IAAA,cACWR,KAAK;IAAA,iBACFC,QAAQ;IAAA,gBACTC,OAAO;IAAA,iBACN,CAAC,CAACC,UAAU;IAC3BE,QAAQ,EAAEA,QAAQ;IAClBX,SAAS,EAAEN,GAAG,CACZM,SAAS,EACTS,UAAU,IAAId,MAAM,CAACoB,SAAS,CAACC,QAAQ,EACvCN,iBAAiB,IAAId,cAAc,CAACmB,SAAS,CAACE,uBAAuB;EACtE,GACGd,KAAK,EACT;AAEN,CAAC;AACDL,cAAc,CAACoB,WAAW,GAAG,gBAAgB"},"metadata":{},"sourceType":"module"}