{"ast":null,"code":"import * as React from 'react';\nimport { EditColumn } from '../../EditColumn';\nimport tableStyles from '@patternfly/react-styles/css/components/Table/table';\nexport var editable = function editable(label, _ref) {\n  var rowIndex = _ref.rowIndex,\n    rowData = _ref.rowData,\n    column = _ref.column;\n  var onRowEdit = column.extraParams.onRowEdit;\n  var toggleEditMode = function toggleEditMode(event, type) {\n    var validationErrors = {};\n    if (type === 'save') {\n      validationErrors = rowData.rowEditValidationRules && rowData.rowEditValidationRules.reduce(function (acc, rule) {\n        var invalidCells = rowData.cells.filter(function (cellData) {\n          var testValue = cellData.props.editableValue === '' ? '' : cellData.props.editableValue || cellData.props.value;\n          var failedValidation = false;\n          if (Array.isArray(testValue) && testValue.length) {\n            // multiple values, like multiselect\n            failedValidation = testValue.reduce(function (hasInvalidSelection, el) {\n              // if one value fails validation, the entire cell is invalid\n              if (hasInvalidSelection === true) {\n                return true;\n              }\n              return !rule.validator(el);\n            }, failedValidation);\n          } else if (Array.isArray(testValue) && !testValue.length) {\n            // case where all values were dismissed in multiselect\n            failedValidation = !rule.validator('');\n          } else {\n            // simple text fields\n            failedValidation = !rule.validator(testValue);\n          }\n          if (failedValidation) {\n            cellData.props.isValid = false;\n          }\n          return failedValidation;\n        });\n        if (invalidCells.length) {\n          acc[rule.name] = invalidCells.map(function (cell) {\n            return cell.props.name;\n          });\n        }\n        return acc;\n      }, {});\n    }\n    // tslint:disable-next-line:no-unused-expression\n    onRowEdit(event, type, rowData && rowData.isEditable, rowIndex, validationErrors);\n  };\n  /**\n   * @param {number} identifier identifier used for the row\n   * @param {RowEditType} actionType the type of row edit action\n   */\n  function getAriaLabelTxt(identifier, actionType) {\n    var result;\n    switch (actionType) {\n      case 'cancel':\n        result = \"Cancel row edits for row \".concat(identifier);\n        break;\n      case 'save':\n        result = \"Save row edits for row \".concat(identifier);\n        break;\n      default:\n        result = \"Place row \".concat(identifier, \" in edit mode\");\n    }\n    return result;\n  }\n  return {\n    className: tableStyles.tableInlineEditAction,\n    component: 'td',\n    isVisible: true,\n    children: React.createElement(EditColumn, {\n      saveAriaLabel: rowData && rowData.rowSaveBtnAriaLabel && rowData.rowSaveBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'save'),\n      cancelAriaLabel: rowData && rowData.rowCancelBtnAriaLabel && rowData.rowCancelBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'cancel'),\n      editAriaLabel: rowData && rowData.rowEditBtnAriaLabel && rowData.rowEditBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'edit'),\n      valid: rowData && rowData.isValid,\n      editing: rowData && rowData.isEditable,\n      onClick: toggleEditMode\n    })\n  };\n};","map":{"version":3,"names":["React","EditColumn","tableStyles","editable","label","_ref","rowIndex","rowData","column","onRowEdit","extraParams","toggleEditMode","event","type","validationErrors","rowEditValidationRules","reduce","acc","rule","invalidCells","cells","filter","cellData","testValue","props","editableValue","value","failedValidation","Array","isArray","length","hasInvalidSelection","el","validator","isValid","name","map","cell","isEditable","getAriaLabelTxt","identifier","actionType","result","concat","className","tableInlineEditAction","component","isVisible","children","createElement","saveAriaLabel","rowSaveBtnAriaLabel","cancelAriaLabel","rowCancelBtnAriaLabel","editAriaLabel","rowEditBtnAriaLabel","valid","editing","onClick"],"sources":["/awx_devel/awx/ui/node_modules/@patternfly/react-table/src/components/Table/utils/decorators/editable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IExtra, IFormatterValueType, ITransform, IRowCell, OnRowEdit, RowErrors, RowEditType } from '../../TableTypes';\nimport { EditColumn } from '../../EditColumn';\nimport tableStyles from '@patternfly/react-styles/css/components/Table/table';\n\nexport const editable: ITransform = (label: IFormatterValueType, { rowIndex, rowData, column }: IExtra) => {\n  const {\n    extraParams: { onRowEdit }\n  } = column;\n\n  const toggleEditMode: OnRowEdit = (event, type) => {\n    let validationErrors: RowErrors = {};\n\n    if (type === 'save') {\n      validationErrors =\n        rowData.rowEditValidationRules &&\n        rowData.rowEditValidationRules.reduce((acc, rule) => {\n          const invalidCells = (rowData.cells as IRowCell[]).filter(cellData => {\n            const testValue =\n              cellData.props.editableValue === '' ? '' : cellData.props.editableValue || cellData.props.value;\n\n            let failedValidation = false;\n\n            if (Array.isArray(testValue) && testValue.length) {\n              // multiple values, like multiselect\n              failedValidation = testValue.reduce((hasInvalidSelection: boolean, el: string) => {\n                // if one value fails validation, the entire cell is invalid\n                if (hasInvalidSelection === true) {\n                  return true;\n                }\n                return !rule.validator(el);\n              }, failedValidation);\n            } else if (Array.isArray(testValue) && !testValue.length) {\n              // case where all values were dismissed in multiselect\n              failedValidation = !rule.validator('');\n            } else {\n              // simple text fields\n              failedValidation = !rule.validator(testValue);\n            }\n\n            if (failedValidation) {\n              cellData.props.isValid = false;\n            }\n            return failedValidation;\n          });\n\n          if (invalidCells.length) {\n            acc[rule.name] = invalidCells.map(cell => cell.props.name);\n          }\n          return acc;\n        }, {} as RowErrors);\n    }\n\n    // tslint:disable-next-line:no-unused-expression\n    onRowEdit(event, type, rowData && rowData.isEditable, rowIndex, validationErrors);\n  };\n\n  /**\n   * @param {number} identifier identifier used for the row\n   * @param {RowEditType} actionType the type of row edit action\n   */\n  function getAriaLabelTxt(identifier: number, actionType: RowEditType): string {\n    let result: string;\n    switch (actionType) {\n      case 'cancel':\n        result = `Cancel row edits for row ${identifier}`;\n        break;\n      case 'save':\n        result = `Save row edits for row ${identifier}`;\n        break;\n      default:\n        result = `Place row ${identifier} in edit mode`;\n    }\n    return result;\n  }\n\n  return {\n    className: tableStyles.tableInlineEditAction,\n    component: 'td',\n    isVisible: true,\n    children: (\n      <EditColumn\n        saveAriaLabel={\n          (rowData && rowData.rowSaveBtnAriaLabel && rowData.rowSaveBtnAriaLabel(rowIndex)) ||\n          getAriaLabelTxt(rowIndex, 'save')\n        }\n        cancelAriaLabel={\n          (rowData && rowData.rowCancelBtnAriaLabel && rowData.rowCancelBtnAriaLabel(rowIndex)) ||\n          getAriaLabelTxt(rowIndex, 'cancel')\n        }\n        editAriaLabel={\n          (rowData && rowData.rowEditBtnAriaLabel && rowData.rowEditBtnAriaLabel(rowIndex)) ||\n          getAriaLabelTxt(rowIndex, 'edit')\n        }\n        valid={rowData && rowData.isValid}\n        editing={rowData && rowData.isEditable}\n        onClick={toggleEditMode}\n      />\n    )\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}