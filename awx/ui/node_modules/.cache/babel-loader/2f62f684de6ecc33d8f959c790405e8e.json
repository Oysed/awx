{"ast":null,"code":"import _objectSpread from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/awx_devel/awx/ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/awx_devel/awx/ui/node_modules/@babel/runtime/regenerator/index.js\";import{getJobModel}from'util/jobs';export function fetchCount(_x,_x2){return _fetchCount.apply(this,arguments);}function _fetchCount(){_fetchCount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(job,params){var _yield$getJobModel$re,_yield$getJobModel$re2,lastEvents;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getJobModel(job.type).readEvents(job.id,_objectSpread(_objectSpread({},params),{},{order_by:'-counter',limit:1}));case 2:_yield$getJobModel$re=_context.sent;_yield$getJobModel$re2=_yield$getJobModel$re.data.results;lastEvents=_yield$getJobModel$re2===void 0?[]:_yield$getJobModel$re2;return _context.abrupt(\"return\",lastEvents.length>=1?lastEvents[0].counter:0);case 6:case\"end\":return _context.stop();}}},_callee);}));return _fetchCount.apply(this,arguments);}export function prependTraceback(job,events){var countOffset=0;if(!(job!==null&&job!==void 0&&job.result_traceback)){return{events:events,countOffset:countOffset};}var tracebackEvent={counter:1,created:null,event:null,type:null,stdout:job===null||job===void 0?void 0:job.result_traceback,start_line:0};var firstIndex=events.findIndex(function(jobEvent){return jobEvent.counter===1;});if(firstIndex>-1){var _events$firstIndex$st;if(!events[firstIndex].stdout){events[firstIndex].isTracebackOnly=true;}var stdoutLines=((_events$firstIndex$st=events[firstIndex].stdout)===null||_events$firstIndex$st===void 0?void 0:_events$firstIndex$st.split('\\r\\n'))||[];stdoutLines[0]=tracebackEvent.stdout;events[firstIndex].stdout=stdoutLines.join('\\r\\n');}else{countOffset+=1;events.unshift(tracebackEvent);}return{events:events,countOffset:countOffset};}","map":{"version":3,"names":["getJobModel","fetchCount","_x","_x2","_fetchCount","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","job","params","_yield$getJobModel$re","_yield$getJobModel$re2","lastEvents","wrap","_callee$","_context","prev","next","type","readEvents","id","_objectSpread","order_by","limit","sent","data","results","abrupt","length","counter","stop","prependTraceback","events","countOffset","result_traceback","tracebackEvent","created","event","stdout","start_line","firstIndex","findIndex","jobEvent","_events$firstIndex$st","isTracebackOnly","stdoutLines","split","join","unshift"],"sources":["/awx_devel/awx/ui/src/screens/Job/JobOutput/loadJobEvents.js"],"sourcesContent":["import { getJobModel } from 'util/jobs';\n\nexport async function fetchCount(job, params) {\n  const {\n    data: { results: lastEvents = [] },\n  } = await getJobModel(job.type).readEvents(job.id, {\n    ...params,\n    order_by: '-counter',\n    limit: 1,\n  });\n  return lastEvents.length >= 1 ? lastEvents[0].counter : 0;\n}\n\nexport function prependTraceback(job, events) {\n  let countOffset = 0;\n  if (!job?.result_traceback) {\n    return {\n      events,\n      countOffset,\n    };\n  }\n\n  const tracebackEvent = {\n    counter: 1,\n    created: null,\n    event: null,\n    type: null,\n    stdout: job?.result_traceback,\n    start_line: 0,\n  };\n  const firstIndex = events.findIndex((jobEvent) => jobEvent.counter === 1);\n  if (firstIndex > -1) {\n    if (!events[firstIndex].stdout) {\n      events[firstIndex].isTracebackOnly = true;\n    }\n    const stdoutLines = events[firstIndex].stdout?.split('\\r\\n') || [];\n    stdoutLines[0] = tracebackEvent.stdout;\n    events[firstIndex].stdout = stdoutLines.join('\\r\\n');\n  } else {\n    countOffset += 1;\n    events.unshift(tracebackEvent);\n  }\n\n  return {\n    events,\n    countOffset,\n  };\n}\n"],"mappings":"uTAAA,OAASA,WAAW,KAAQ,WAAW,CAEvC,eAAsB,CAAAC,UAAUA,CAAAC,EAAA,CAAAC,GAAA,SAAAC,WAAA,CAAAC,KAAA,MAAAC,SAAA,GAS/B,SAAAF,YAAA,EAAAA,WAAA,CAAAG,iBAAA,cAAAC,mBAAA,CAAAC,IAAA,CATM,SAAAC,QAA0BC,GAAG,CAAEC,MAAM,MAAAC,qBAAA,CAAAC,sBAAA,CAAAC,UAAA,QAAAP,mBAAA,CAAAQ,IAAA,UAAAC,SAAAC,QAAA,kBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAE,IAAA,SAGhC,CAAApB,WAAW,CAACW,GAAG,CAACU,IAAI,CAAC,CAACC,UAAU,CAACX,GAAG,CAACY,EAAE,CAAAC,aAAA,CAAAA,aAAA,IAC5CZ,MAAM,MACTa,QAAQ,CAAE,UAAU,CACpBC,KAAK,CAAE,CAAC,EACT,CAAC,QAAAb,qBAAA,CAAAK,QAAA,CAAAS,IAAA,CAAAb,sBAAA,CAAAD,qBAAA,CALAe,IAAI,CAAIC,OAAO,CAAEd,UAAU,CAAAD,sBAAA,UAAG,EAAE,CAAAA,sBAAA,QAAAI,QAAA,CAAAY,MAAA,UAM3Bf,UAAU,CAACgB,MAAM,EAAI,CAAC,CAAGhB,UAAU,CAAC,CAAC,CAAC,CAACiB,OAAO,CAAG,CAAC,0BAAAd,QAAA,CAAAe,IAAA,OAAAvB,OAAA,GAC1D,UAAAN,WAAA,CAAAC,KAAA,MAAAC,SAAA,GAED,MAAO,SAAS,CAAA4B,gBAAgBA,CAACvB,GAAG,CAAEwB,MAAM,CAAE,CAC5C,GAAI,CAAAC,WAAW,CAAG,CAAC,CACnB,GAAI,EAACzB,GAAG,SAAHA,GAAG,WAAHA,GAAG,CAAE0B,gBAAgB,EAAE,CAC1B,MAAO,CACLF,MAAM,CAANA,MAAM,CACNC,WAAW,CAAXA,WACF,CAAC,CACH,CAEA,GAAM,CAAAE,cAAc,CAAG,CACrBN,OAAO,CAAE,CAAC,CACVO,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE,IAAI,CACXnB,IAAI,CAAE,IAAI,CACVoB,MAAM,CAAE9B,GAAG,SAAHA,GAAG,iBAAHA,GAAG,CAAE0B,gBAAgB,CAC7BK,UAAU,CAAE,CACd,CAAC,CACD,GAAM,CAAAC,UAAU,CAAGR,MAAM,CAACS,SAAS,CAAC,SAACC,QAAQ,QAAK,CAAAA,QAAQ,CAACb,OAAO,GAAK,CAAC,GAAC,CACzE,GAAIW,UAAU,CAAG,CAAC,CAAC,CAAE,KAAAG,qBAAA,CACnB,GAAI,CAACX,MAAM,CAACQ,UAAU,CAAC,CAACF,MAAM,CAAE,CAC9BN,MAAM,CAACQ,UAAU,CAAC,CAACI,eAAe,CAAG,IAAI,CAC3C,CACA,GAAM,CAAAC,WAAW,CAAG,EAAAF,qBAAA,CAAAX,MAAM,CAACQ,UAAU,CAAC,CAACF,MAAM,UAAAK,qBAAA,iBAAzBA,qBAAA,CAA2BG,KAAK,CAAC,MAAM,CAAC,GAAI,EAAE,CAClED,WAAW,CAAC,CAAC,CAAC,CAAGV,cAAc,CAACG,MAAM,CACtCN,MAAM,CAACQ,UAAU,CAAC,CAACF,MAAM,CAAGO,WAAW,CAACE,IAAI,CAAC,MAAM,CAAC,CACtD,CAAC,IAAM,CACLd,WAAW,EAAI,CAAC,CAChBD,MAAM,CAACgB,OAAO,CAACb,cAAc,CAAC,CAChC,CAEA,MAAO,CACLH,MAAM,CAANA,MAAM,CACNC,WAAW,CAAXA,WACF,CAAC,CACH"},"metadata":{},"sourceType":"module"}